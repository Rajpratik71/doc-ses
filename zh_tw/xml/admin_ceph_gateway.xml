<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="admin_ceph_gateway.xml" version="5.0" xml:id="cha-ceph-gw">

 <title>Ceph Object Gateway</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:maintainer>tbazant@suse.com</dm:maintainer>
        <dm:status>編輯</dm:status>
        <dm:deadline/>
        <dm:priority/>
        <dm:translation>yes</dm:translation>
        <dm:languages/>
        <dm:release>SES 5</dm:release>
      </dm:docmanager>
    </info>
    <para>
  本章介紹物件閘道相關管理任務的詳細資料，例如，檢查服務的狀態，管理帳戶、多站台閘道或 LDAP 驗證。
 </para>
 <sect1 xml:id="sec-ceph-rgw-limits">
  <title>物件閘道限制和命名限制</title>

  <para>
   下面列出了物件閘道的一些重要限制︰
  </para>

  <sect2 xml:id="ogw-limits-bucket">
   <title>桶限制</title>
   <para>
    透過 S3 API 存取物件閘道時，桶名稱必須符合 DNS 且允許使用虛線字元「-」。當透過 Swift API 存取物件閘道時，您可使用支援 UTF-8 的字元 (斜線字元「/」除外) 的任何組合。桶名稱最多可包含 255 個字元。桶名稱必須是唯一的。
   </para>
   <tip>
    <title>使用符合 DNS 的桶名稱</title>
    <para>
     雖然透過 Swift API 存取時，可使用任何基於 UTF-8 的桶名稱，但仍建議您根據 S3 命名限制對桶命名，以免在透過 S3 API 存取同一個桶時發生問題。
    </para>
   </tip>
  </sect2>

  <sect2 xml:id="ogw-limits-object">
   <title>儲存的物件的限制</title>
   <variablelist>
    <varlistentry>
     <term>每個使用者的最大物件數量</term>
     <listitem>
      <para>
       預設無限制 (大約不超過 2^63)。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>每個桶的最大物件數量</term>
     <listitem>
      <para>
       預設無限制 (大約不超過 2^63)。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>要上傳/儲存的物件的最大大小</term>
     <listitem>
      <para>
       單次上傳的上限為 5GB。更大的物件可分為多個部分上傳。多部分區塊的最大數量為 10000。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="ogw-limits-http">
   <title>HTTP 標頭限制</title>
   <para>
    HTTP 標頭和要求限制取決於所使用的 Web 前端。預設的 CivetWeb 限制 HTTP 標頭數量最多為 64 個，HTTP 標頭大小最大為 16kB。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="ogw-deploy">
  <title>部署物件閘道</title>

  <para>
   建議透過 DeepSea 基礎架構來部署 Ceph Object Gateway，具體做法是在 Salt Master 上的 <filename>policy.cfg</filename> 檔案中新增相關的 <literal>role-rgw [...]</literal> 行，並執行必要的 DeepSea 階段。
  </para>

  <itemizedlist>
   <listitem>
    <para>
     若要在 Ceph 叢集部署期間加入物件閘道，請參閱<xref linkend="ceph-install-stack"/>和<xref linkend="policy-configuration"/>。
    </para>
   </listitem>
   <listitem>
    <para>
     若要新增物件閘道角色至已部署的叢集，請參閱<xref linkend="salt-adding-services"/>。
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="ceph-rgw-operating">
  <title>操作物件閘道服務</title>

  <para>
   透過執行 <command>systemctl</command> 指令來操作物件閘道服務。您需要擁有 <systemitem class="username">root</systemitem> 特權才能操作物件閘道服務。請注意，<replaceable>gateway_host</replaceable> 是您需要操作其物件閘道例項的伺服器主機名稱。
  </para>

  <para>
   物件閘道服務支援以下子指令︰
  </para>

  <variablelist>
   <varlistentry>
    <term>systemctl status ceph-radosgw@rgw.<replaceable>gateway_host</replaceable>
    </term>
    <listitem>
     <para>
      將服務的狀態資訊列印出來。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>systemctl start ceph-radosgw@rgw.<replaceable>gateway_host</replaceable>
    </term>
    <listitem>
     <para>
      如果服務尚未執行，則將它啟動。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>systemctl restart ceph-radosgw@rgw.<replaceable>gateway_host</replaceable>
    </term>
    <listitem>
     <para>
      重新啟動服務。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>systemctl stop ceph-radosgw@rgw.<replaceable>gateway_host</replaceable>
    </term>
    <listitem>
     <para>
      停止正在執行的服務。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>systemctl enable ceph-radosgw@rgw.<replaceable>gateway_host</replaceable>
    </term>
    <listitem>
     <para>
      啟用服務，以便在系統啟動時自動啟動該服務。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>systemctl disable ceph-radosgw@rgw.<replaceable>gateway_host</replaceable>
    </term>
    <listitem>
     <para>
      停用服務，以便在系統啟動時不自動啟動該服務。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-ceph-rgw-configuration">
  <title>組態參數</title>

  <para>
   在 <filename>ceph.conf</filename> 檔案中指定大量選項可能會影響物件閘道的行為。下面列出了最重要的選項。如需完整清單，請參閱 <link xlink:href="http://docs.ceph.com/docs/master/radosgw/config-ref/"/>。
  </para>

  <variablelist>
   <varlistentry>
    <term>rgw_thread_pool_size</term>
    <listitem>
     <para>
      Civetweb 伺服器的線串數。如果需要處理更多要求，請設定更高的值。預設為 100 個線串。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw_num_rados_handles</term>
    <listitem>
     <para>
      物件閘道的 RADOS 叢集處理器數量 (請參閱 <link xlink:href="http://docs.ceph.com/docs/master/rados/api/librados-intro/#step-2-configuring-a-cluster-handle"/>)。擁有可設定數量的 RADOS 處理器，可以大幅提升所有類型的工作負載的效能。現在，每個物件閘道工作線串都可以在其存留期內選取某個 RADOS 處理器。預設值為 1。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw_max_chunk_size</term>
    <listitem>
     <para>
      將在單個操作中讀取的最大資料區塊大小。將值增至 4MB (4194304) 可以在處理大型物件時提高效能。預設值為 128kB (131072)。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <sect2 xml:id="sec-ceph-rgw-configuration-notes">
   <title>補充說明</title>
   <variablelist>
    <varlistentry>
     <term>rgw dns name</term>
     <listitem>
      <para>
       如果將參數 <literal>rgw dns name</literal> 新增至 <filename>ceph.conf</filename>，請確定已設定 S3 用戶端，以導向 <literal>rgw dns name</literal> 所指定端點的要求。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="ceph-rgw-access">
  <title>管理物件閘道的存取方式</title>

  <para>
   您可以使用與 S3 或 Swift 相容的介面來與物件閘道通訊。S3 介面與大部分 Amazon S3 RESTful API 都相容。Swift 介面與大部分 OpenStack Swift API 都相容。
  </para>

  <para>
   這兩個介面都要求您建立特定的使用者，並安裝相關的用戶端軟體，以使用該使用者的機密金鑰來與閘道通訊。
  </para>

  <sect2 xml:id="accessing-ragos-gateway">
   <title>存取物件閘道</title>
   <sect3>
    <title>S3 介面存取方式</title>
    <para>
     若要存取 S3 介面，您需要有 REST 用戶端。<command>S3cmd</command> 是一個指令行 S3 用戶端。您可以在 <link xlink:href="https://build.opensuse.org/package/show/Cloud:Tools/s3cmd">OpenSUSE Build Service</link> 中找到它。該儲存庫包含既適用於 SUSE Linux Enterprise 套裝作業系統又適用於基於 openSUSE 的套裝作業系統的版本。
    </para>
    <para>
     如果您想測試自己是否能夠存取 S3 介面，也可以編寫一個簡短的 Python 程序檔。該程序檔將連接到物件閘道，建立新桶，並列出所有桶。<option>aws_access_key_id</option> 和 <option>aws_secret_access_key</option> 的值取自<xref linkend="adding-s3-swift-users"/>中所述 <command>radosgw_admin</command> 指令傳回的 <option>access_key</option> 和 <option>secret_key</option> 的值。
    </para>
    <procedure>
     <step>
      <para>
       安裝 <systemitem>python-boto</systemitem> 套件︰
      </para>
<screen>sudo zypper in python-boto</screen>
     </step>
     <step>
      <para>
       建立名為 <filename>s3test.py</filename> 的新 Python 程序檔，並在其中包含以下內容︰<remark role="fixme">Provide script in RPM? Is it really necessary to create pool? This script is not necessary at all, remove it from documentation?</remark>
      </para>
<screen>import boto
import boto.s3.connection
access_key = '11BS02LGFB6AL6H1ADMW'
secret_key = 'vzCEkuryfn060dfee4fgQPqFrncKEIkh3ZcdOANY'
conn = boto.connect_s3(
aws_access_key_id = access_key,
aws_secret_access_key = secret_key,
host = '{hostname}',
is_secure=False,
calling_format = boto.s3.connection.OrdinaryCallingFormat(),
)
bucket = conn.create_bucket('my-new-bucket')
for bucket in conn.get_all_buckets():
  print "{name}\t{created}".format(
  name = bucket.name,
  created = bucket.creation_date,
  )</screen>
      <para>
       以您設定了物件閘道服務的主機的主機名稱 (例如 <literal>gateway_host</literal>) 取代 <literal>{hostname}</literal>。
      </para>
     </step>
     <step>
      <para>
       執行程序檔︰
      </para>
<screen>python s3test.py</screen>
      <para>
       該程序檔將輸出類似下方內容的資訊︰
      </para>
<screen>my-new-bucket 2015-07-22T15:37:42.000Z</screen>
     </step>
    </procedure>
   </sect3>
   <sect3>
    <title>Swift 介面存取</title>
    <para>
     若要透過 Swift 介面存取物件閘道，需要使用 <command>swift</command> 指令行用戶端。該介面的手冊頁 <command>man 1 swift</command> 介紹了有關其指令行選項的詳細資訊。
    </para>
    <para>
     SUSE Linux Enterprise 12 SP3 的「Public Cloud」模組中包含了相應的套件。在安裝該套件之前，需要啟動該模組並重新整理軟體儲存庫︰
    </para>
<screen>sudo SUSEConnect -p sle-module-public-cloud/12/x86_64
sudo zypper refresh</screen>
    <para>
     若要安裝 <command>swift</command> 指令，請執行以下指令︰
    </para>
<screen>sudo zypper in python-swiftclient</screen>
    <para>
     使用以下語法進行 swift 存取︰
    </para>
<screen>swift -A http://<replaceable>IP_ADDRESS</replaceable>/auth/1.0 \
-U example_user:swift -K '<replaceable>swift_secret_key</replaceable>' list</screen>
    <para>
     請以閘道伺服器的 IP 位址取代 <replaceable>IP_ADDRESS</replaceable>，以在<xref linkend="adding-s3-swift-users"/>中針對 <systemitem>swift</systemitem> 使用者執行 <command>radosgw-admin key create</command> 指令後的輸出中的相應值取代 <replaceable>swift_secret_key</replaceable>。
    </para>
    <para>
     例如︰
    </para>
<screen>swift -A http://gateway.example.com/auth/1.0 -U example_user:swift \
-K 'r5wWIxjOCeEO7DixD1FjTLmNYIViaC6JVhi3013h' list</screen>
    <para>
     輸出為︰
    </para>
<screen>my-new-bucket</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="s3-swift-accounts-managment">
   <title>管理 S3 和 Swift 帳戶</title>
   <sect3 xml:id="adding-s3-swift-users">
    <title>新增 S3 和 Swift 使用者</title>
    <para>
     您需要建立使用者、存取金鑰和機密才能讓最終使用者與閘道互動。使用者分兩種類型︰<emphasis>使用者</emphasis>和<emphasis>子使用者</emphasis>。與 S3 介面互動時使用<emphasis>使用者</emphasis>，<emphasis>子使用者</emphasis>是 Swift 介面的使用者。每個子使用者都與某個使用者相關聯。
    </para>
    <para>
     也可以透過 DeepSea 檔案 <filename>rgw.sls</filename> 新增使用者。如需範例，請參閱<xref linkend="ceph-nfsganesha-customrole-rgw-multiusers"/>。
    </para>
    <para>
     若要建立 Swift 使用者，請執行以下步驟︰
    </para>
    <procedure>
     <step>
      <para>
       若要建立 Swift 使用者 (在我們的術語中稱作<emphasis>子使用者</emphasis>)，您需要先建立關聯的<emphasis>使用者</emphasis>。
      </para>
<screen>sudo radosgw-admin user create --uid=<replaceable>username</replaceable> \
 --display-name="<replaceable>display-name</replaceable>" --email=<replaceable>email</replaceable></screen>
      <para>
       例如︰
      </para>
<screen>sudo radosgw-admin user create \
   --uid=example_user \
   --display-name="Example User" \
   --email=penguin@example.com</screen>
     </step>
     <step>
      <para>
       若要建立使用者的子使用者 (用於 Swift 介面)，必須指定使用者 ID (--uid=<replaceable>username</replaceable>)、子使用者 ID 和該子使用者的存取層級。
      </para>
<screen>sudo radosgw-admin subuser create --uid=<replaceable>uid</replaceable> \
 --subuser=<replaceable>uid</replaceable> \
 --access=[ <replaceable>read | write | readwrite | full</replaceable> ]</screen>
      <para>
       例如︰
      </para>
<screen>sudo radosgw-admin subuser create --uid=example_user \
 --subuser=example_user:swift --access=full</screen>
     </step>
     <step>
      <para>
       為使用者產生機密金鑰。
      </para>
<screen>sudo radosgw-admin key create \
   --gen-secret \
   --subuser=example_user:swift \
   --key-type=swift</screen>
     </step>
     <step>
      <para>
       這兩個指令都會輸出 JSON 格式的資料，其中顯示了使用者狀態。請注意以下幾行，並記住 <literal>secret_key</literal> 值︰
      </para>
<screen>"swift_keys": [
   { "user": "example_user:swift",
     "secret_key": "r5wWIxjOCeEO7DixD1FjTLmNYIViaC6JVhi3013h"}],</screen>
     </step>
    </procedure>
    <para/>
    <para>
     透過 S3 介面存取物件閘道時，需要執行以下指令來建立 S3 使用者︰
    </para>
<screen>sudo radosgw-admin user create --uid=<replaceable>username</replaceable> \
 --display-name="<replaceable>display-name</replaceable>" --email=<replaceable>email</replaceable></screen>
    <para>
     例如︰
    </para>
<screen>sudo radosgw-admin user create \
   --uid=example_user \
   --display-name="Example User" \
   --email=penguin@example.com</screen>
    <para>
     該指令還會建立使用者的存取金鑰和機密金鑰。檢查該指令輸出中的 <literal>access_key</literal> 和 <literal>secret_key</literal> 關鍵字及其值︰
    </para>
<screen>[...]
 "keys": [
       { "user": "example_user",
         "access_key": "11BS02LGFB6AL6H1ADMW",
         "secret_key": "vzCEkuryfn060dfee4fgQPqFrncKEIkh3ZcdOANY"}],
 [...]</screen>
   </sect3>
   <sect3 xml:id="removing-s3-swift-users">
    <title>移除 S3 和 Swift 使用者</title>
    <para>
     刪除 S3 使用者與刪除 Swift 使用者的程序類似。不過，在刪除 Swift 使用者時，您可能需要同時刪除該使用者及其子使用者。
    </para>
    <para>
     若要移除 S3 或 Swift 使用者 (包括其所有子使用者)，請在以下指令中指定 <option>user rm</option> 和使用者 ID︰
    </para>
<screen>sudo radosgw-admin user rm --uid=example_user</screen>
    <para>
     若要移除子使用者，請指定 <option>subuser rm</option> 和子使用者 ID。
    </para>
<screen>sudo radosgw-admin subuser rm --uid=example_user:swift</screen>
    <para>
     您可使用以下選項︰
    </para>
    <variablelist>
     <varlistentry>
      <term>--purge-data</term>
      <listitem>
       <para>
        清除與該使用者 ID 關聯的所有資料。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>--purge-keys</term>
      <listitem>
       <para>
        清除與該使用者 ID 關聯的所有金鑰。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <tip>
     <title>移除子使用者</title>
     <para>
      移除某個子使用者時，移除的是其對 Swift 介面的存取權限。該使用者仍會保留在系統中。
     </para>
    </tip>
   </sect3>
   <sect3 xml:id="changing-s3-swift-users-password">
    <title>變更 S3 和 Swift 使用者的存取金鑰與機密金鑰</title>
    <para>
     存取閘道時，<literal>access_key</literal> 和 <literal>secret_key</literal> 參數用於識別物件閘道使用者。變更現有使用者金鑰的過程與建立新使用者金鑰的過程相同，舊金鑰會被覆寫。
    </para>
    <para>
     對於 S3 使用者，請執行以下指令︰
    </para>
<screen>sudo radosgw-admin key create --uid=<replaceable>example_user</replaceable> --key-type=s3 --gen-access-key --gen-secret</screen>
    <para>
     對於 Swift 使用者，請執行以下指令︰
    </para>
<screen>sudo radosgw-admin key create --subuser=<replaceable>example_user</replaceable>:swift --key-type=swift --gen-secret</screen>
    <variablelist>
     <varlistentry>
      <term><option>--key-type=<replaceable>type</replaceable></option>
      </term>
      <listitem>
       <para>
        指定金鑰的類型。值為 <literal>swift</literal> 或 <literal>s3</literal>。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>--gen-access-key</option>
      </term>
      <listitem>
       <para>
        產生隨機存取金鑰 (預設針對 S3 使用者)。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>--gen-secret</option>
      </term>
      <listitem>
       <para>
        產生隨機機密金鑰。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>--secret=<replaceable>key</replaceable></option>
      </term>
      <listitem>
       <para>
        指定機密金鑰，例如手動產生的金鑰。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3 xml:id="user-quota-managment">
    <title>使用者定額管理</title>
    <para>
     Ceph Object Gateway 允許您針對使用者以及使用者擁有的桶設定定額。定額包括一個桶中的最大物件數，以及最大儲存大小 (MB)。
    </para>
    <para>
     在啟用使用者定額之前，需要先設定定額的參數︰
    </para>
<screen>sudo radosgw-admin quota set --quota-scope=user --uid=<replaceable>example_user</replaceable> \
 --max-objects=1024 --max-size=1024</screen>
    <variablelist>
     <varlistentry>
      <term><option>--max-objects</option>
      </term>
      <listitem>
       <para>
        指定最大物件數。指定負值會停用檢查。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>--max-size</option>
      </term>
      <listitem>
       <para>
        指定最大位元組數。指定負值會停用檢查。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>--quota-scope</option>
      </term>
      <listitem>
       <para>
        設定定額的範圍。選項包括 <literal>bucket</literal> 和 <literal>user</literal>。桶定額將套用到使用者擁有的桶。使用者定額將套用到使用者。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     設定使用者定額後，可啟用該定額︰
    </para>
<screen>sudo radosgw-admin quota enable --quota-scope=user --uid=<replaceable>example_user</replaceable></screen>
    <para>
     若要停用定額︰
    </para>
<screen>sudo radosgw-admin quota disable --quota-scope=user --uid=<replaceable>example_user</replaceable></screen>
    <para>
     若要列出定額設定︰
    </para>
<screen>sudo radosgw-admin user info --uid=<replaceable>example_user</replaceable></screen>
    <para>
     若要更新定額統計資料︰
    </para>
<screen>sudo radosgw-admin user stats --uid=<replaceable>example_user</replaceable> --sync-stats</screen>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="ceph-rgw-https">
  <title>為物件閘道啟用 HTTPS/SSL</title>

  <para>
   若要讓預設物件閘道角色可使用 SSL 進行安全通訊，您需要擁有 CA 核發的證書，或建立自行簽署的證書。共有兩種方法可以設定啟用 HTTPS 的物件閘道，使用預設設定是較簡單的方法，而進階方法則可微調 HTTPS 相關的設定。
  </para>

  <sect2 xml:id="ogw-selfcert">
   <title>建立自行簽署的證書</title>
   <tip>
    <para>
     如果您已擁有 CA 簽署的有效證書，請跳過本節。
    </para>
   </tip>
   <para>
    依預設，DeepSea 預期證書檔案位於 Salt Master 的 <filename>/srv/salt/ceph/rgw/cert/rgw.pem</filename> 下。它會將證書分發到具有物件閘道角色的 Salt Minion 的 <filename>/etc/ceph/rgw.pem</filename> 下，以便 Ceph 讀取。
   </para>
   <para>
    以下程序說明如何在 Salt Master 節點上產生自行簽署的 SSL 證書。
   </para>
   <procedure>
    <step>
     <para>
      在 <filename>/etc/ssl/openssl.cnf</filename> 檔案中，將您想向其通告物件閘道的所有主機名稱的 <option>subjectAltName</option> 選項新增至 <literal>[v3_req]</literal> 區段︰
     </para>
<screen>
[...]
[ v3_req ]
subjectAltName = ${ENV::SAN}
[...]
</screen>
    </step>
    <step>
     <para>
      使用 <command>openssl</command> 建立金鑰和證書。在 <command>openssl</command> 前加上 <literal>env SAN=DNS:fqdn</literal> 字首。輸入需要包含在證書中的所有資料。建議您輸入 FQDN 做為通用名稱。簽署證書前，確認「X509v3 Subject Alternative Name:」包含在要求的延伸中，並且產生的證書中設定了「X509v3 Subject Alternative Name:」。
     </para>
<screen>
<prompt>root@master # </prompt>env SAN=DNS:fqdn openssl req -x509 -nodes -days 1095 \
 -newkey rsa:4096 -keyout rgw.key -out /srv/salt/ceph/rgw/cert/rgw.pem
</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="ogw-ssl-simple">
   <title>簡單的 HTTPS 組態</title>
   <para>
    依預設，物件閘道節點上的 Ceph 會讀取 <filename>/etc/ceph/rgw.pem</filename> 證書，並使用連接埠 443 進行 SSL 安全通訊。如果您不需要變更這些值，請執行以下步驟︰
   </para>
   <procedure>
    <step>
     <para>
      編輯 <filename>/srv/pillar/ceph/stack/global.yml</filename>，新增下行︰
     </para>
<screen>
rgw_configurations: rgw-ssl
rgw_init: default-ssl
</screen>
    </step>
    <step>
     <para>
      執行 DeepSea 階段 2、3、和 4 以套用這些變更︰
     </para>
<screen>
<prompt>root@master # </prompt>salt-run state.orch ceph.stage.2
<prompt>root@master # </prompt>salt-run state.orch ceph.stage.3
<prompt>root@master # </prompt>salt-run state.orch ceph.stage.4
</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="ogw-ssl-advanced">
   <title>進階 HTTPS 組態</title>
   <para>
    如果您需要變更物件閘道 SSL 設定的預設值，請執行以下步驟︰
   </para>
   <procedure>
    <step>
     <para>
      將預設物件閘道 SSL 組態複製到 <filename>ceph.conf.d</filename> 子目錄︰
     </para>
<screen>
<prompt>root@master # </prompt>cp /srv/salt/ceph/configuration/files/rgw-ssl.conf \
 /srv/salt/ceph/configuration/files/ceph.conf.d/rgw.conf
</screen>
    </step>
    <step>
     <para>
      編輯 <filename>/srv/salt/ceph/configuration/files/ceph.conf.d/rgw.conf</filename>，變更預設選項，例如連接埠號碼或 SSL 證書路徑，以反映您的設定。
     </para>
    </step>
    <step>
     <para>
      執行 DeepSea 階段 3 和 4 以套用這些變更︰
     </para>
<screen>
<prompt>root@master # </prompt>salt-run state.orch ceph.stage.3
<prompt>root@master # </prompt>salt-run state.orch ceph.stage.4
</screen>
    </step>
   </procedure>
   <tip xml:id="rgw-civetweb-multiport">
    <title>結合到多個連接埠</title>
    <para>
     CivetWeb 伺服器可以結合到多個連接埠。如果您需要使用 SSL 和非 SSL 兩種連接來存取單個物件閘道例項，這種做法將非常實用。指定多個連接埠時，請使用加號「+」分隔各連接埠號碼。兩個連接埠的組態行如下所示︰
    </para>
<screen>[client.{{ client }}]
rgw_frontends = civetweb port=80+443s ssl_certificate=/etc/ceph/rgw.pem</screen>
   </tip>
  </sect2>
 </sect1>
 <sect1 xml:id="ceph-rgw-sync">
  <title>同步模組</title>

  <para>
   使用 Jewel 中引入的物件閘道<emphasis>多站台</emphasis>功能可以建立多個區域，並在這些區域之間鏡像資料和中繼資料。<emphasis>同步模組</emphasis>建立在多站台架構的基礎上，可將資料和中繼資料轉遞到不同的外部層級。每當發生資料變更 (建立桶或使用者等中繼資料操作也視為資料變更) 時，可以透過同步模組執行一系列動作。隨著 rgw 多站台變更最終在多個遠端站台上保持一致，變更將以非同步方式傳播。因而很多情況下都適合使用同步模組，例如，將物件儲存備份到外部雲端叢集或使用磁帶機的自訂備份解決方案、在 Elasticsearch 中為中繼資料編製索引，等等。
  </para>

  <sect2 xml:id="ceph-rgw-sync-zones">
   <title>同步區域</title>
   <para>
    同步模組的組態位於區域本地。同步模組會確定區域是要輸出資料，還是只能使用已在另一區域中修改的資料。從 Luminous 版本開始，支援的同步外掛程式包括 <literal>elasticsearch</literal>、<literal>rgw</literal> 和 <literal>log</literal>，其中 rgw 是在區域之間同步資料的預設同步外掛程式，log 是記錄遠端區域中發生的中繼資料操作的簡單同步外掛程式。以下各節內容包含了使用 <literal>elasticsearch</literal> 同步模組的區域範例。其程序與設定任何其他同步外掛程式的程序均類似。
   </para>
   <note>
    <title>預設同步外掛程式</title>
    <para>
     <literal>rgw</literal> 是預設的同步外掛程式，不需要對此進行明確設定。
    </para>
   </note>
   <sect3 xml:id="ceph-rgw-sync-zones-req">
    <title>要求和假設</title>
    <para>
     我們假設已依照<xref linkend="ceph-rgw-fed"/>中所述建立了一個簡單的多站台組態，它由 <literal>us-east</literal> 和 <literal>us-west</literal> 這兩個區域組成。現在，我們新增第三個區域 <literal>us-east-es</literal>，此區域只處理來自其他站台的中繼資料。此區域可與 <literal>us-east</literal> 位於同一 Ceph 叢集中，也可位於不同的叢集中。此區域只使用來自其他區域的中繼資料，並且此區域中的物件閘道不會直接處理任何最終使用者要求。
    </para>
   </sect3>
   <sect3 xml:id="ceph-rgw-sync-zones-configure">
    <title>設定同步模組</title>
    <procedure>
     <step>
      <para>
       建立類似於<xref linkend="ceph-rgw-fed"/>中所述區域的第三個區域，例如
      </para>
<screen>
<prompt>root # </prompt><command>radosgw-admin</command> zone create --rgw-zonegroup=us --rgw-zone=us-east-es \
--access-key={system-key} --secret={secret} --endpoints=http://rgw-es:80
      </screen>
     </step>
     <step>
      <para>
       可透過以下指令設定此區域的同步模組
      </para>
<screen>
<prompt>root # </prompt><command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --tier-type={tier-type} \
--tier-config={set of key=value pairs}
      </screen>
     </step>
     <step>
      <para>
       例如，在 <literal>elasticsearch</literal> 同步模組中執行以下指令
      </para>
<screen>
<prompt>root # </prompt><command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --tier-type=elasticsearch \
--tier-config=endpoint=http://localhost:9200,num_shards=10,num_replicas=1
      </screen>
      <para>
       如需支援的各個 tier-config 選項，請參閱<xref linkend="ceph-rgw-sync-elastic"/>。
      </para>
     </step>
     <step>
      <para>
       最後，更新期間
      </para>
<screen>
<prompt>root # </prompt><command>radosgw-admin</command> period update --commit
      </screen>
     </step>
     <step>
      <para>
       現在，在區域中啟動 radosgw
      </para>
<screen>
<prompt>root # </prompt><command>systemctl</command> start ceph-radosgw@rgw.`hostname -s`
<prompt>root # </prompt><command>systemctl</command> enable ceph-radosgw@rgw.`hostname -s`
      </screen>
     </step>
    </procedure>
   </sect3>
  </sect2>

  <sect2 xml:id="ceph-rgw-sync-elastic">
   <title>在 Elasticsearch 中儲存中繼資料</title>
   <para>
    此同步模組會將來自其他區域的中繼資料寫入 Elasticsearch。從 Luminous 版本開始，我們目前儲存在 Elasticsearch 中的是資料欄位的 JSON。
   </para>
<screen>
{
  "_index" : "rgw-gold-ee5863d6",
  "_type" : "object",
  "_id" : "34137443-8592-48d9-8ca7-160255d52ade.34137.1:object1:null",
  "_score" : 1.0,
  "_source" : {
    "bucket" : "testbucket123",
    "name" : "object1",
    "instance" : "null",
    "versioned_epoch" : 0,
    "owner" : {
      "id" : "user1",
      "display_name" : "user1"
    },
    "permissions" : [
      "user1"
    ],
    "meta" : {
      "size" : 712354,
      "mtime" : "2017-05-04T12:54:16.462Z",
      "etag" : "7ac66c0f148de9519b8bd264312c4d64"
    }
  }
}
   </screen>
   <sect3 xml:id="ceph-rgw-sync-elastic-config">
    <title>Elasticsearch 層類型組態參數</title>
    <variablelist>
     <varlistentry>
      <term>endpoint</term>
      <listitem>
       <para>
        指定要存取的 Elasticsearch 伺服器端點。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>num_shards</term>
      <listitem>
       <para>
        <emphasis>(整數)</emphasis> 資料同步啟始化時將為 Elasticsearch 設定的分區數量。請注意，啟始化之後將無法變更此數量。在此處進行任何變更都需要重建 Elasticsearch 索引，並需要重新啟始化資料同步程序。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>num_replicas</term>
      <listitem>
       <para>
        <emphasis>(整數)</emphasis> 資料同步啟始化時將為 Elasticsearch 設定的複本數量。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>explicit_custom_meta</term>
      <listitem>
       <para>
        <emphasis>(true | false)</emphasis> 指定是否將為所有使用者自訂中繼資料編製索引，或者使用者是否需要 (在桶層級) 設定應為哪些客戶中繼資料項目編製索引。此參數預設為 false
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>index_buckets_list</term>
      <listitem>
       <para>
        <emphasis>(逗號分隔的字串清單)</emphasis> 如果為空白，將會為所有桶編製索引。否則，將只為此處指定的桶編製索引。可以提供桶字首 (例如「foo*」) 或桶字尾 (例如「*bar」)。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>approved_owners_list</term>
      <listitem>
       <para>
        <emphasis>(逗號分隔的字串清單)</emphasis> 如果為空白，將會為所有擁有者的桶編製索引 (需遵守其他限制)；否則，將只為指定擁有者擁有的桶編製索引。也可以提供字尾和字首。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>override_index_path</term>
      <listitem>
       <para>
        <emphasis>(字串)</emphasis> 如果非空白，將使用此字串做為 Elasticsearch 索引路徑。否則，將在同步啟始化時確定並產生索引路徑。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3 xml:id="ceph-rgw-sync-elastic-query">
    <title>中繼資料查詢</title>
    <para>
     由於 Elasticsearch 叢集現在儲存物件中繼資料，因此務必確定 Elasticsearch 端點不會向公眾公開，只有叢集管理員可存取它們。向最終使用者自己公開中繼資料查詢會造成問題，因為我們希望該使用者只查詢自己的中繼資料，而不能查詢任何其他使用者的中繼資料，這就要求 Elasticsearch 叢集像 RGW 所做的那樣來對使用者進行驗證，而這就導致了問題發生。
    </para>
    <para>
     從 Luminous 版本開始，中繼資料主區域中的 RGW 可處理最終使用者要求。這樣就無需向公眾公開 Elasticsearch 端點，同時也解決了驗證和授權問題，因為 RGW 自身就能對最終使用者要求進行驗證。出於此目的，RGW 在桶 API 中引入了可處理 Elasticsearch 要求的新查詢。所有這些要求都必須傳送到中繼資料主區域。
    </para>
    <variablelist>
     <varlistentry>
      <term>獲取 Elasticsearch 查詢</term>
      <listitem>
<screen>
GET /<replaceable>BUCKET</replaceable>?query={query-expr}
       </screen>
       <para>
        要求參數︰
       </para>
       <itemizedlist>
        <listitem>
         <para>
          max-keys︰要傳回的最大項目數
         </para>
        </listitem>
        <listitem>
         <para>
          marker︰分頁標記
         </para>
        </listitem>
       </itemizedlist>
<screen>
expression := [(]&lt;arg&gt; &lt;op&gt; &lt;value&gt; [)][&lt;and|or&gt; ...]
       </screen>
       <para>
        運算子為下列其中一項︰&lt;、&lt;=、==、&gt;=、&gt;
       </para>
       <para>
        例如︰
       </para>
<screen>
GET /?query=name==foo
       </screen>
       <para>
        將傳回使用者有權讀取且編製了索引、名為「foo」的所有鍵。輸出內容將是 XML 格式的鍵清單，與 S3 的「列出桶」要求的回應類似。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>設定自訂中繼資料欄位</term>
      <listitem>
       <para>
        定義應該 (在指定的桶中) 為哪些自訂中繼資料項目編製索引，以及這些鍵的類型是什麼。如果設定了明確的自訂中繼資料索引，則需要此定義，以便 rgw 為指定的自訂中繼資料值編製索引。如果未設定，在已編製索引的中繼資料鍵類型不是字串的情況下，也需要此定義。
       </para>
<screen>
POST /<replaceable>BUCKET</replaceable>?mdsearch
x-amz-meta-search: &lt;key [; type]&gt; [, ...]
       </screen>
       <para>
        若中繼資料欄位有多個，則必須使用逗號加以分隔，可以使用分號「;」強制指定欄位的類型。目前允許的類型包括字串 (預設值)、整數和日期。例如，如果您想將自訂物件中繼資料 x-amz-meta-year、x-amz-meta-date 和 x-amz-meta-title 的索引分別指定為整數、日期和字串類型，可執行以下指令
       </para>
<screen>
POST /mybooks?mdsearch
x-amz-meta-search: x-amz-meta-year;int, x-amz-meta-release-date;date, x-amz-meta-title;string
       </screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>刪除自訂中繼資料組態</term>
      <listitem>
       <para>
        刪除自訂中繼資料桶組態。
       </para>
<screen>
DELETE /<replaceable>BUCKET</replaceable>?mdsearch
       </screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>獲取自訂中繼資料組態</term>
      <listitem>
       <para>
        擷取自訂中繼資料桶組態。
       </para>
<screen>
GET /<replaceable>BUCKET</replaceable>?mdsearch
       </screen>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="ceph-rgw-ldap">
  <title>LDAP 驗證</title>

  <para>
   除了預設的本地使用者驗證之外，物件閘道還能利用 LDAP 伺服器服務來對使用者進行驗證。
  </para>

  <sect2 xml:id="ceph-rgw-ldap-how-works">
   <title>驗證機制</title>
   <para>
    物件閘道從記號擷取使用者的 LDAP 身分證明。可以根據使用者名稱建構搜尋過濾器。物件閘道使用設定的服務帳戶在目錄中搜尋相符項。如果找到了某個項目，物件閘道會嘗試使用記號中的密碼結合到所找到的可辨識名稱。如果身分證明有效，結合將會成功，並且物件閘道會授予存取權。
   </para>
   <para>
    您可以透過將搜尋範圍設定為特定的組織單位，或者指定自訂搜尋過濾器 (例如，要求特定的群組成員資格、自訂物件類別或屬性)，來限制允許的使用者。
   </para>
  </sect2>

  <sect2 xml:id="ceph-rgw-ldap-reqs">
   <title>要求</title>
   <itemizedlist>
    <listitem>
     <para>
      <emphasis>LDAP 或 Active Directory</emphasis>︰物件閘道可存取的執行中 LDAP 例項。
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>服務帳戶</emphasis>︰物件閘道要使用且擁有搜尋權限的 LDAP 身分證明。
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>使用者帳戶</emphasis>︰LDAP 目錄中的至少一個使用者帳戶。
     </para>
    </listitem>
   </itemizedlist>
   <important>
    <title>LDAP 使用者和本地使用者不能重疊</title>
    <para>
     不得對本地使用者以及要使用 LDAP 進行驗證的使用者使用相同的使用者名稱。物件閘道無法區分兩者，會將它們視為同一個使用者。
    </para>
   </important>
   <tip>
    <title>健康檢查</title>
    <para>
     使用 <command>ldapsearch</command> 公用程式可驗證服務帳戶或 LDAP 連接。例如︰
    </para>
<screen>ldapsearch -x -D "uid=ceph,ou=system,dc=example,dc=com" -W \
-H ldaps://example.com -b "ou=users,dc=example,dc=com" 'uid=*' dn</screen>
    <para>
     請務必在 Ceph 組態檔案中使用相同的 LDAP 參數，以杜絕可能的問題。
    </para>
   </tip>
  </sect2>

  <sect2 xml:id="ceph-rgw-ldap-config">
   <title>將物件閘道設定為使用 LDAP 驗證</title>
   <para>
    <filename>/etc/ceph/ceph.conf</filename> 組態檔案中的以下參數與 LDAP 驗證相關︰
   </para>
   <variablelist>
    <varlistentry>
     <term><option>rgw_ldap_uri</option>
     </term>
     <listitem>
      <para>
       指定要使用的 LDAP 伺服器。請務必使用 <literal>ldaps://<replaceable>fqdn</replaceable>:<replaceable>port</replaceable></literal> 參數，以免公開傳輸純文字身分證明。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>rgw_ldap_binddn</option>
     </term>
     <listitem>
      <para>
       物件閘道使用的服務帳戶的可辨識名稱 (DN)。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>rgw_ldap_secret</option>
     </term>
     <listitem>
      <para>
       服務帳戶的密碼。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>rgw_ldap_searchdn</term>
     <listitem>
      <para>
       指定在目錄資訊樹狀結構中搜尋使用者的範圍，可以是使用者的組織單位，或某個更具體的組織單位 (OU)。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>rgw_ldap_dnattr</option>
     </term>
     <listitem>
      <para>
       在建構的搜尋過濾器中用來比對某個使用者名稱的屬性。根據所用的目錄資訊樹狀結構 (DIT)，可能會是 <literal>uid</literal> 或 <literal>cn</literal>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>rgw_search_filter</option>
     </term>
     <listitem>
      <para>
       如果未指定，則物件閘道會使用 <option>rgw_ldap_dnattr</option> 設定自動建構搜尋過濾器。使用此參數能非常靈活地縮小所允許使用者清單的範圍。如需詳細資料，請參閱<xref linkend="ceph-rgw-ldap-filter"/>。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="ceph-rgw-ldap-filter">
   <title>使用自訂搜尋過濾器來限制使用者存取權</title>
   <para>
    可透過兩種方式使用 <option>rgw_search_filter</option> 參數。
   </para>
   <sect3>
    <title>用於進一步限制所建構搜尋過濾器的部分過濾器</title>
    <para>
     部分過濾器的範例︰
    </para>
<screen>"objectclass=inetorgperson"</screen>
    <para>
     物件閘道將照常使用記號中的使用者名稱和 <option>rgw_ldap_dnattr</option> 的值產生搜尋過濾器。然後，建構的過濾器將與 <option>rgw_search_filter</option> 屬性中的部分過濾器合併。根據所用的使用者名稱和設定，最終的搜尋過濾器可能會變成︰
    </para>
<screen>"(&amp;(uid=hari)(objectclass=inetorgperson))"</screen>
    <para>
     在這種情況下，僅當在 LDAP 目錄中找到了使用者「hari」，該使用者具有物件類別「inetorgperson」並且確實指定了有效密碼時，才向他授予存取權。
    </para>
   </sect3>
   <sect3>
    <title>完整過濾器</title>
    <para>
     完整過濾器必須包含 <option>USERNAME</option> 記號，在嘗試驗證期間，將以使用者名稱取代該記號。在這種情況下，不再使用 <option>rgw_ldap_dnattr</option> 參數。例如，若要將有效使用者限制為特定的群組，可使用以下過濾器︰
    </para>
<screen>"(&amp;(uid=USERNAME)(memberOf=cn=ceph-users,ou=groups,dc=mycompany,dc=com))"</screen>
    <note>
     <title><literal>memberOf</literal> 屬性</title>
     <para>
      若要在 LDAP 搜尋中使用 <literal>memberOf</literal> 屬性，您的特定 LDAP 伺服器實作需要提供伺服器端支援。
     </para>
    </note>
   </sect3>
  </sect2>

  <sect2 xml:id="ceph-rgw-ldap-token">
   <title>產生用於 LDAP 驗證的存取記號</title>
   <para>
    <command>radosgw-token</command> 公用程式根據 LDAP 使用者名稱和密碼產生存取記號。它會輸出 base-64 編碼字串，即實際的存取記號。請使用偏好的 S3 用戶端 (請參閱<xref linkend="accessing-ragos-gateway"/>)，將該記號指定為存取金鑰，並使用空白機密金鑰。
   </para>
<screen><prompt>root@minion &gt; </prompt>export RGW_ACCESS_KEY_ID="<replaceable>username</replaceable>"
<prompt>root@minion &gt; </prompt>export RGW_SECRET_ACCESS_KEY="<replaceable>password</replaceable>"
<prompt>root@minion &gt; </prompt>radosgw-token --encode --ttype=ldap</screen>
   <important>
    <title>純文字身分證明</title>
    <para>
     存取記號是一個 base-64 編碼的 JSON 結構，並包含純文字形式的 LDAP 身分證明。
    </para>
   </important>
   <note>
    <title>Active Directory</title>
    <para>
     對於 Active Directory，請使用 <option>--ttype=ad</option> 參數。
    </para>
   </note>
  </sect2>
 </sect1>
 <sect1 xml:id="ogw-bucket-sharding">
  <title>桶索引分區</title>

  <para>
   物件閘道在索引池中儲存桶索引資料，該池預設為 <literal>.rgw.buckets.index</literal>。如果將太多 (數十萬個) 物件放入單個桶中，並且不設定每個桶的最大物件數量定額 (<option>rgw bucket default quota max objects</option>)，索引池的效能可能會下降。<emphasis>桶索引分區</emphasis>可在允許每個桶中放入大量物件的同時，防止出現此類效能下降的情況。
  </para>

  <sect2 xml:id="ogw-bucket-reshard">
   <title>桶索引重新分區</title>
   <para>
    如果隨著桶的增大，其初始組態不再能符合需求，則需要對桶的索引池進行重新分區。您可以使用自動線上桶索引重新分區 (請參閱<xref linkend="ogw-bucket-sharding-dyn"/>)，也可以手動離線執行桶索引重新分區 (請參閱<xref linkend="ogw-bucket-sharding-re"/>)。
   </para>
   <sect3 xml:id="ogw-bucket-sharding-dyn">
    <title>動態重新分區</title>
    <para>
     從 SUSE Enterprise Storage 5 開始，我們支援線上桶重新分區。此功能會偵測每個桶的物件數量是否達到某個閾值，如果達到，則會相應地自動增加桶索引使用的分區數量。此程序會減少每個桶索引分區中的項目數。
    </para>
    <para>
     該偵測程序在以下情況和環境中執行︰
    </para>
    <itemizedlist>
     <listitem>
      <para>
       當有新的物件新增至桶中時。
      </para>
     </listitem>
     <listitem>
      <para>
       在定期掃描所有桶的背景程序中。掃描的目的是為了處理未在更新的現有桶。
      </para>
     </listitem>
    </itemizedlist>
    <para>
     需要重新分區的桶會新增至 <option>reshard_log</option> 佇列，且將排程於稍後進行重新分區。重新分區線串在背景中執行，並將逐個執行已排程的重新分區。
    </para>
    <variablelist>
     <title>設定動態重新分區</title>
     <varlistentry>
      <term><option>rgw_dynamic_resharding</option>
      </term>
      <listitem>
       <para>
        啟用或停用動態桶索引重新分區。可用的值為「true」或「false」。預設設為「true」。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw_reshard_num_logs</option>
      </term>
      <listitem>
       <para>
        重新分區記錄的分區數。預設設為 16。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw_reshard_bucket_lock_duration</option>
      </term>
      <listitem>
       <para>
        重新分區期間將桶物件鎖定的持續時間。預設設為 120 秒。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw_max_objs_per_shard</option>
      </term>
      <listitem>
       <para>
        每個桶索引分區的最大物件數。預設設為 100000 個物件。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw_reshard_thread_interval</option>
      </term>
      <listitem>
       <para>
        兩輪重新分區線串處理間隔的最長時間。預設設為 600 秒。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <important>
     <title>多站台組態</title>
     <para>
      多站台環境不支援動態重新分區。從 Ceph 12.2.2 起預設會停用該功能，但建議您再次檢查此設定。
     </para>
    </important>
    <variablelist>
     <title>用於管理重新分區程序的指令</title>
     <varlistentry>
      <term>將桶新增至重新分區佇列︰</term>
      <listitem>
<screen>
<prompt>root@minion &gt; </prompt>radosgw-admin reshard add \
 --bucket <replaceable>BUCKET_NAME</replaceable> \
 --num-shards <replaceable>NEW_NUMBER_OF_SHARDS</replaceable>
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>列出重新分區佇列︰</term>
      <listitem>
<screen>
<prompt>root@minion &gt; </prompt>radosgw-admin reshard list
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>處理/排程桶重新分區︰</term>
      <listitem>
<screen>
<prompt>root@minion &gt; </prompt>radosgw-admin reshard process
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>顯示桶重新分區狀態︰</term>
      <listitem>
<screen>
<prompt>root@minion &gt; </prompt>radosgw-admin reshard status --bucket <replaceable>BUCKET_NAME</replaceable>
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>取消等待中的桶重新分區︰</term>
      <listitem>
<screen>
<prompt>root@minion &gt; </prompt>radosgw-admin reshard cancel --bucket <replaceable>BUCKET_NAME</replaceable>
</screen>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3 xml:id="ogw-bucket-sharding-re">
    <title>手動重新分區</title>
    <para>
     只有簡單物件閘道組態支援<xref linkend="ogw-bucket-sharding-dyn"/>中所述的動態重新分區。對於多站台組態，請使用本節中所述的手動重新分區。
    </para>
    <para>
     若要手動對桶索引執行離線重新分區，請使用以下指令︰
    </para>
<screen>
<prompt>root@minion &gt; </prompt>radosgw-admin bucket reshard
</screen>
    <para>
     <command>bucket reshard</command> 指令執行以下操作︰
    </para>
    <itemizedlist>
     <listitem>
      <para>
       為指定物件建立一組新的桶索引物件。
      </para>
     </listitem>
     <listitem>
      <para>
       散佈這些索引物件的所有物件項目。
      </para>
     </listitem>
     <listitem>
      <para>
       建立新的桶例項。
      </para>
     </listitem>
     <listitem>
      <para>
       列出新的桶例項以及桶，以便所有新的索引操作都能夠套用到新的桶索引。
      </para>
     </listitem>
     <listitem>
      <para>
       將舊的和新的桶 ID 列印到標準輸出。
      </para>
     </listitem>
    </itemizedlist>
    <procedure>
     <title>將桶索引池重新分區</title>
     <step>
      <para>
       確定對桶執行的所有操作都已停止。
      </para>
     </step>
     <step>
      <para>
       備份原始桶索引︰
      </para>
<screen>
<prompt>root@minion &gt; </prompt>radosgw-admin bi list \
 --bucket=<replaceable>BUCKET_NAME</replaceable> \
 &gt; <replaceable>BUCKET_NAME</replaceable>.list.backup
</screen>
     </step>
     <step>
      <para>
       對桶索引重新分區︰
      </para>
<screen>
 <prompt>root@minion &gt; </prompt>radosgw-admin reshard \
 --bucket=<replaceable>BUCKET_NAME</replaceable> \
 --num-shards=<replaceable>NEW_SHARDS_NUMBER</replaceable>
</screen>
      <tip>
       <title>舊桶 ID</title>
       <para>
        此指令還會將新的和舊的桶 ID 列印到其輸出中。請記下舊桶 ID，清除舊的桶索引物件時需要用到它。
       </para>
      </tip>
     </step>
     <step>
      <para>
       將舊桶索引清單與新桶索引清單進行比較，以驗證列出的物件是否正確。然後，清除舊的桶索引物件︰
      </para>
<screen>
<prompt>root@minion &gt; </prompt>radosgw-admin bi purge
 --bucket=<replaceable>BUCKET_NAME</replaceable>
 --bucket-id=<replaceable>OLD_BUCKET_ID</replaceable>
</screen>
     </step>
    </procedure>
   </sect3>
  </sect2>

  <sect2 xml:id="ogw-bucket-sharding-new">
   <title>新桶的桶索引分區</title>
   <para>
    有兩個選項會影響桶索引分區︰
   </para>
   <itemizedlist>
    <listitem>
     <para>
      對於簡單組態，請使用 <option>rgw_override_bucket_index_max_shards</option> 選項。
     </para>
    </listitem>
    <listitem>
     <para>
      對於多站台組態，請使用 <option>bucket_index_max_shards</option> 選項。
     </para>
    </listitem>
   </itemizedlist>
   <para>
    將選項設為 <literal>0</literal> 將停用桶索引分區。如果將其設為大於 <literal>0</literal> 的值，則會啟用桶索引分區，並設定最大分區數。
   </para>
   <para>
    下面的公式可協助您計算建議的分區數︰
   </para>
<screen>
number_of_objects_expected_in_a_bucket / 100000
</screen>
   <para>
    注意，分區的最大數量為 7877。
   </para>
   <sect3>
    <title>簡單組態</title>
    <procedure>
     <step>
      <para>
       開啟 Ceph 組態檔案，然後新增或修改以下選項︰
      </para>
<screen>
rgw_override_bucket_index_max_shards = 12
</screen>
      <tip>
       <title>所有或一個物件閘道例項</title>
       <para>
        若要為物件閘道的所有例項設定桶索引分區，請在 <literal>[global]</literal> 區段中包含 <option>rgw_override_bucket_index_max_shards</option>。
       </para>
       <para>
        若要僅為物件閘道的某個特定例項設定桶索引分區，請在相關例項區段中包含 <option>rgw_override_bucket_index_max_shards</option>。
       </para>
      </tip>
     </step>
     <step>
      <para>
       重新啟動物件閘道。請參閱<xref linkend="ceph-rgw-operating"/>，以取得詳細資料。
      </para>
     </step>
    </procedure>
   </sect3>
   <sect3>
    <title>多站台組態</title>
    <para>
     多站台組態可能會使用另一個索引池來管理容錯移轉。若要為一個區域群組內的區域設定一致的分區數量，請在該區域群組的組態中設定 <option>bucket_index_max_shards</option> 選項︰
    </para>
    <procedure>
     <step>
      <para>
       將區域群組組態輸出至 <filename>zonegroup.json</filename> 檔案中︰
      </para>
<screen>
<prompt>root@minion &gt; </prompt>radosgw-admin zonegroup get &gt; zonegroup.json
</screen>
     </step>
     <step>
      <para>
       編輯 <filename>zonegroup.json</filename> 檔案，為每個指定的區域設定 <option>bucket_index_max_shards</option> 選項。
      </para>
     </step>
     <step>
      <para>
       重設區域群組︰
      </para>
<screen>
<prompt>root@minion &gt; </prompt>radosgw-admin zonegroup set &lt; zonegroup.json
</screen>
     </step>
     <step>
      <para>
       更新期間︰
      </para>
<screen>
<prompt>root@minion &gt; </prompt>radosgw-admin period update --commit
</screen>
     </step>
    </procedure>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="ogw-keystone">
  <title>整合 OpenStack Keystone</title>

  <para>
   OpenStack Keystone 是一項用於 OpenStack 產品的身分服務。您可以將物件閘道與 Keystone 相整合，以設定接受 Keystone 驗證記號的閘道。Ceph Object Gateway 端將會對 Keystone 授權可存取閘道的使用者進行驗證，並視需要自動建立使用者。物件閘道會定期查詢 Keystone，以獲取已撤銷記號清單。
  </para>

  <sect2 xml:id="ogw-keystone-ostack">
   <title>設定 OpenStack</title>
   <para>
    設定 Ceph Object Gateway 前，需要先設定 OpenStack Keystone 以啟用 Swift 服務，並將其指向 Ceph Object Gateway︰
   </para>
   <procedure>
    <step>
     <para>
      <emphasis>設定 Swift 服務。</emphasis>若要使用 OpenStack 來驗證 Swift 使用者，請先建立 Swift 服務︰
     </para>
<screen>
<prompt>root # </prompt>openstack service create \
 --name=swift \
 --description="Swift Service" \
 object-store
</screen>
    </step>
    <step>
     <para>
      <emphasis>設定端點。</emphasis>建立 Swift 服務後，指向 Ceph Object Gateway。以閘道的區域群組名稱或區域名稱取代 <replaceable>REGION_NAME</replaceable>。
     </para>
<screen>
<prompt>root # </prompt>openstack endpoint create --region <replaceable>REGION_NAME</replaceable> \
 --publicurl   "http://radosgw.example.com:8080/swift/v1" \
 --adminurl    "http://radosgw.example.com:8080/swift/v1" \
 --internalurl "http://radosgw.example.com:8080/swift/v1" \
 swift
</screen>
    </step>
    <step>
     <para>
      <emphasis>驗證設定。</emphasis>建立 Swift 服務並設定端點後，顯示端點以確認所有設定正確無誤。
     </para>
<screen>
<prompt>root # </prompt>openstack endpoint show object-store
</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="ogw-keystone-ogw">
   <title>設定 Ceph Object Gateway</title>
   <sect3>
    <title>設定 SSL 證書</title>
    <para>
     Ceph Object Gateway 會定期查詢 Keystone，以獲取已撤銷記號清單。系統會對這些要求加以編碼並簽署。還可設定 Keystone 以提供自行簽署的記號，這些記號同樣經過編碼和簽署。您需要設定閘道以便其可以解碼並驗證這些已簽署訊息。因此，需要將 Keystone 用於建立要求的 OpenSSL 證書轉換為「nss db」格式︰
    </para>
<screen>
<prompt>root # </prompt>mkdir /var/ceph/nss
<prompt>root # </prompt>openssl x509 -in /etc/keystone/ssl/certs/ca.pem \
 -pubkey | certutil -d /var/ceph/nss -A -n ca -t "TCu,Cu,Tuw"
<systemitem class="username">root</systemitem>openssl x509 -in /etc/keystone/ssl/certs/signing_cert.pem \
 -pubkey | certutil -A -d /var/ceph/nss -n signing_cert -t "P,P,P"
</screen>
    <para>
     還可以使用自行簽署的 SSL 證書終止 OpenStack Keystone，以便讓 Ceph Object Gateway 與 Keystone 互動。可在執行 Ceph Object Gateway 的節點上安裝 Keystone 的 SSL 證書，也可以將選項 <option>rgw keystone verify ssl</option> 的值設為「false」。將 <option>rgw keystone verify ssl</option> 設為「false」表示閘道將不會嘗試驗證證書。
    </para>
   </sect3>
   <sect3>
    <title>設定物件閘道的選項</title>
    <para>
     您可以使用以下選項設定 Keystone 整合︰
    </para>
    <variablelist>
     <varlistentry>
      <term><option>rgw keystone api version</option>
      </term>
      <listitem>
       <para>
        Keystone API 的版本。有效選項為 2 或 3。預設設為 2。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone url</option>
      </term>
      <listitem>
       <para>
        Keystone 伺服器上管理 RESTful API 的 URL 和連接埠號碼。採用 <replaceable>SERVER_URL:PORT_NUMBER</replaceable> 模式。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone admin token</option>
      </term>
      <listitem>
       <para>
        在 Keystone 內部為管理要求設定的記號或共用機密。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone accepted roles</option>
      </term>
      <listitem>
       <para>
        處理要求需要具有的角色。預設設為「Member, admin」。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone accepted admin roles</option>
      </term>
      <listitem>
       <para>
        允許使用者獲取管理特權的角色清單。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone token cache size</option>
      </term>
      <listitem>
       <para>
        Keystone 記號快取中的最大項目數。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone revocation interval</option>
      </term>
      <listitem>
       <para>
        檢查已撤銷記號前間隔的秒數。預設設為 15 * 60。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone implicit tenants</option>
      </term>
      <listitem>
       <para>
        在各自的同名租用戶中建立新使用者。預設設為「false」。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw s3 auth use keystone</option>
      </term>
      <listitem>
       <para>
        如果設為「true」，Ceph Object Gateway 將使用 Keystone 對使用者進行驗證。預設設為「false」。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>nss db path</option>
      </term>
      <listitem>
       <para>
        NSS 資料庫的路徑。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     還可以設定 Keystone 服務租用戶、Keystone 的使用者和密碼 (適用於 OpenStack Identity API 2.0 版本)，設定方法與設定 OpenStack 服務的方法類似。使用此方法可避免在組態檔案中設定共用機密 <option>rgw keystone admin token</option>，生產環境中應停用該共用機密。服務租用戶身分證明應擁有管理員特權，如需詳細資料，請參閱 <link xlink:href="https://docs.openstack.org/keystone/latest/#setting-up-projects-users-and-roles">OpenStack Keystone 官方文件</link>。相關組態選項如下︰
    </para>
    <variablelist>
     <varlistentry>
      <term><option>rgw keystone admin user</option>
      </term>
      <listitem>
       <para>
        Keystone 管理員使用者名稱。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone admin password</option>
      </term>
      <listitem>
       <para>
        Keystone 管理員使用者密碼。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone admin tenant</option>
      </term>
      <listitem>
       <para>
        Keystone 2.0 版管理員使用者租用戶。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     Ceph Object Gateway 使用者與 Keystone 租用戶一一對應。系統會為一個 Keystone 使用者指定不同的角色，這些角色可能分散在不止一個租用戶上。當 Ceph Object Gateway 收到票證時，會查看為該票證指定的租用戶和使用者角色，並根據 <option>rgw keystone accepted roles</option> 選項的設定接受或拒絕要求。
    </para>
    <tip>
     <title>對應到 OpenStack 租用戶</title>
     <para>
      雖然 Swift 租用戶預設會對應到物件閘道使用者，但也可透過 <option>rgw keystone implicit tenants</option> 選項將其對應到 OpenStack 租用戶。如此會讓容器使用租用戶名稱空間，而不是物件閘道預設採用的 S3 之類全域名稱空間。建議在規劃階段就決定好對應方法，以免產生混淆。這是因為以後切換選項只會影響租用戶下所對應的較新要求，而先前建立的舊桶仍將繼續放在全域名稱空間中。
     </para>
    </tip>
    <para>
     對於 OpenStack Identity API 3 版本，您應使用以下選項取代 <option>rgw keystone admin tenant</option> 選項︰
    </para>
    <variablelist>
     <varlistentry>
      <term><option>rgw keystone admin domain</option>
      </term>
      <listitem>
       <para>
        Keystone 管理員使用者網域。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>rgw keystone admin project</option>
      </term>
      <listitem>
       <para>
        Keystone 管理員使用者專案。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="ceph-rgw-fed">


  <title>多站台物件閘道</title>

  <variablelist>
   <varlistentry>
    <term>區域</term>
    <listitem>
     <para>
      一或多個物件閘道例項的邏輯分組。必須將<emphasis>區域群組</emphasis>中的一個區域指定為<emphasis>主</emphasis>區域，負責處理所有桶和使用者的建立。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>區域群組</term>
    <listitem>
     <para>
      一個區域群組由多個區域組成。應設定一個將負責處理系統組態變更的主區域群組。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>區域群組地圖</term>
    <listitem>
     <para>
      用於存放整個系統地圖的組態結構，例如，哪個區域群組是主區域群組、不同區域群組之間的關係，以及儲存規則等特定組態選項。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>領域</term>
    <listitem>
     <para>
      容納區域群組的容器。使用領域可在叢集之間分隔區域群組。可以建立多個領域，以便在同一叢集中更輕鬆地執行完全不同的組態。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>期間</term>
    <listitem>
     <para>
      期間存放領域目前狀態的組態結構。每個期間都包含一個唯一的 ID 和一個版本編號。每個領域都有一個關聯的目前期間，存放區域群組組態的目前狀態和儲存規則。非主區域發生的任何組態變更都會使期間的版本編號遞增。將主區域變更為其他區域會觸發以下變更︰
     </para>
     <itemizedlist>
      <listitem>
       <para>
        產生具有新期間 ID 和版本編號為 1 的新期間。
       </para>
      </listitem>
      <listitem>
       <para>
        領域的目前期間會更新，以指向新產生的期間 ID。
       </para>
      </listitem>
      <listitem>
       <para>
        領域的版本編號會遞增。
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   您可將每個物件閘道設定為參與同盟架構，在使用中區域組態中運作，同時允許寫入非主區域。
  </para>

  <sect2 xml:id="ceph-rgw-fed-term">
   <title>術語</title>
   <para>
    下面解釋了同盟架構特定的術語︰
   </para>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-intro">
   <title>範例叢集設定</title>
   <para>
    本範例重點展示如何建立包含三個不同區域的單個區域群組，這三個區域會主動同步其資料。其中兩個區域屬於同一叢集，第三個區域屬於其他叢集。在物件閘道之間鏡像資料變更時，不需要同步代理程式的參與。如此可大大簡化組態規劃和主動/主動組態。請注意，中繼資料操作 (例如建立新使用者) 仍需要透過主區域處理。但是，資料操作 (例如建立桶和物件) 可由任意區域處理。
   </para>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-keys">
   <title>系統金鑰</title>
   <para>
    物件閘道需要您在設定區域時建立與 S3 相容的系統使用者，以及他們的存取金鑰和機密金鑰。這樣，另一個物件閘道例項便可以使用該存取金鑰和機密金鑰從遠端提取組態。如需建立 S3 使用者的詳細資訊，請參閱<xref linkend="adding-s3-swift-users"/>。
   </para>
   <tip>
    <para>
     在建立區域自身之前產生存取金鑰和機密金鑰的做法非常實用，因為這可以讓稍後的程序檔編寫和組態管理工具的使用變得更輕鬆。
    </para>
   </tip>
   <para>
    對於本範例，我們假設已在環境變數中設定存取金鑰和機密金鑰︰
   </para>
<screen># SYSTEM_ACCESS_KEY=1555b35654ad1656d805
# SYSTEM_SECRET_KEY=h7GhxuBLTrlhVUyxSPUKUV8r/2EI4ngqJxD7iBdBYLhwluN30JaT3Q==</screen>
   <para>
    一般情況下，存取金鑰包含 20 個英數字元，而機密金鑰包含 40 個英數字元 (也可以包含 +/= 字元)。您可在指令行中產生這些金鑰︰
   </para>
<screen># SYSTEM_ACCESS_KEY=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1)
# SYSTEM_SECRET_KEY=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 40 | head -n 1)</screen>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-naming">
   <title>命名慣例</title>
   <para>
    本範例介紹設定主區域的過程。我們假設有一個名為 <literal>us</literal> 的區域群組，該區域群組橫跨美國，將做為我們的主區域群組。該區域群組將包含以 <replaceable>zonegroup</replaceable>-<replaceable>zone</replaceable> 格式編寫的兩個區域。這只是我們一貫採用的格式，您可以選擇偏好的格式。概括如下︰
   </para>
   <itemizedlist>
    <listitem>
     <para>
      主區域群組︰美國︰<literal>us</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      主區域︰美國東部區域 1︰<literal>us-east-1</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      次要區域︰美國東部區域 2︰<literal>us-east-2</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      次要區域︰美國西部區域︰<literal>us-west</literal>
     </para>
    </listitem>
   </itemizedlist>
   <para>
    此設定將屬於名為 <literal>gold</literal> 的較大領域。<literal>us-east-1</literal> 和 <literal>us-east-2</literal> 區域屬於同一個 Ceph 叢集，<literal>us-east-1</literal> 是主區域。<literal>us-west</literal> 在另一個不同的 Ceph 叢集中。
   </para>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-pools">
   <title>預設池</title>
   <para>
    為物件閘道設定相應的權限後，它便可自行建立預設池。<literal>pg_num</literal> 和 <literal>pgp_num</literal> 值取自 <filename>ceph.conf</filename> 組態檔案。依預設，與區域相關的池遵循 <replaceable>zone-name</replaceable>.<replaceable>pool-name</replaceable> 格式慣例。以 <literal>us-east-1</literal> 區域為例，它將建立以下池︰
   </para>
<screen>.rgw.root
us-east-1.rgw.control
us-east-1.rgw.data.root
us-east-1.rgw.gc
us-east-1.rgw.log
us-east-1.rgw.intent-log
us-east-1.rgw.usage
us-east-1.rgw.users.keys
us-east-1.rgw.users.email
us-east-1.rgw.users.swift
us-east-1.rgw.users.uid
us-east-1.rgw.buckets.index
us-east-1.rgw.buckets.data
us-east-1.rgw.meta</screen>
   <para>
    也可以在其他區域中建立這些池，只需以相應的區域名稱取代 <literal>us-east-1</literal>。
   </para>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-realm">
   <title>建立領域</title>
   <para>
    設定名為 <literal>gold</literal> 的領域，並將其設為預設領域︰
   </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin realm create --rgw-realm=gold --default
{
  "id": "4a367026-bd8f-40ee-b486-8212482ddcd7",
  "name": "gold",
  "current_period": "09559832-67a4-4101-8b3f-10dfcd6b2707",
  "epoch": 1
}</screen>
   <para>
    請注意，每個領域都有一個 ID，這樣，以後便可靈活地執行所需的操作 (例如，將領域重新命名)。每當我們變更主區域中的任何設定時，<literal>current_period</literal> 都會發生變化。如果主區域的組態有變更，導致目前期間發生變更，<literal>epoch</literal> 將會遞增。
   </para>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-deldefzonegrp">
   <title>刪除預設區域群組</title>
   <para>
    採用預設設定安裝物件閘道時會建立名為 <literal>default</literal> 的預設區域群組。由於我們不再需要預設區域群組，因此將其移除。
   </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin zonegroup delete --rgw-zonegroup=default</screen>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-createmasterzonegrp">
   <title>建立主區域群組</title>
   <para>
    建立名為 <literal>us</literal> 的主區域群組。該區域群組將管理區域群組地圖，並將變更傳播到系統的其餘元件。透過將某個區域群組標示為預設區域群組，可以明確指定要在後續指令中使用的 rgw-zonegroup 參數。
   </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin zonegroup create --rgw-zonegroup=us \
--endpoints=http://rgw1:80 --master --default
{
  "id": "d4018b8d-8c0d-4072-8919-608726fa369e",
  "name": "us",
  "api_name": "us",
  "is_master": "true",
  "endpoints": [
      "http:\/\/rgw1:80"
  ],
  "hostnames": [],
  "hostnames_s3website": [],
  "master_zone": "",
  "zones": [],
  "placement_targets": [],
  "default_placement": "",
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
}</screen>
   <para>
    或者，可使用以下指令將某個區域群組標示為預設區域群組︰
   </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin zonegroup default --rgw-zonegroup=us</screen>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-masterzone">
   <title>建立主區域</title>
   <para>
    現在，建立一個預設區域，並將其新增至預設區域群組。請注意，您在執行中繼資料操作 (例如建立使用者) 時將會用到此區域︰
   </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin zone create --rgw-zonegroup=us --rgw-zone=us-east-1 \
--endpoints=http://rgw1:80 --access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> --secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable>
{
  "id": "83859a9a-9901-4f00-aa6d-285c777e10f0",
  "name": "us-east-1",
  "domain_root": "us-east-1/gc.rgw.data.root",
  "control_pool": "us-east-1/gc.rgw.control",
  "gc_pool": "us-east-1/gc.rgw.gc",
  "log_pool": "us-east-1/gc.rgw.log",
  "intent_log_pool": "us-east-1/gc.rgw.intent-log",
  "usage_log_pool": "us-east-1/gc.rgw.usage",
  "user_keys_pool": "us-east-1/gc.rgw.users.keys",
  "user_email_pool": "us-east-1/gc.rgw.users.email",
  "user_swift_pool": "us-east-1/gc.rgw.users.swift",
  "user_uid_pool": "us-east-1/gc.rgw.users.uid",
  "system_key": {
      "access_key": "1555b35654ad1656d804",
      "secret_key": "h7GhxuBLTrlhVUyxSPUKUV8r\/2EI4ngqJxD7iBdBYLhwluN30JaT3Q=="
  },
  "placement_pools": [
      {
          "key": "default-placement",
          "val": {
              "index_pool": "us-east-1/gc.rgw.buckets.index",
              "data_pool": "us-east-1/gc.rgw.buckets.data",
              "data_extra_pool": "us-east-1/gc.rgw.buckets.non-ec",
              "index_type": 0
          }
      }
  ],
  "metadata_heap": "us-east-1/gc.rgw.meta",
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
}</screen>
   <para>
    請注意，<option>--rgw-zonegroup</option> 和 <option>--default</option> 參數會將該區域新增至某個區域群組，並將其設為預設區域。或者，也可以使用以下指令實現相同的目的︰
   </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin zone default --rgw-zone=us-east-1
<prompt>cephadm &gt; </prompt>radosgw-admin zonegroup add --rgw-zonegroup=us --rgw-zone=us-east-1</screen>
   <sect3 xml:id="ceph-rgw-fed-masterzone-createuser">
    <title>建立系統使用者</title>
    <para>
     若要存取區域池，需要建立一個系統使用者。請注意，在設定次要區域時，也需要這些金鑰。
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin user create --uid=zone.user \
--display-name="Zone User" --access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> \
--secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable> --system</screen>
   </sect3>
   <sect3 xml:id="ceph-rgw-fed-masterzone-updateperiod">
    <title>更新期間</title>
    <para>
     由於您變更了主區域組態，因此需要提交這些變更，使其在領域組態結構中生效。最初的期間類似下方所示︰
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin period get
{
  "id": "09559832-67a4-4101-8b3f-10dfcd6b2707", "epoch": 1, "predecessor_uuid": "", "sync_status": [], "period_map":
  {
    "id": "09559832-67a4-4101-8b3f-10dfcd6b2707", "zonegroups": [], "short_zone_ids": []
  }, "master_zonegroup": "", "master_zone": "", "period_config":
  {
     "bucket_quota": {
     "enabled": false, "max_size_kb": -1, "max_objects": -1
     }, "user_quota": {
       "enabled": false, "max_size_kb": -1, "max_objects": -1
     }
  }, "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7", "realm_name": "gold", "realm_epoch": 1
}</screen>
    <para>
     更新期間並提交變更︰
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin period update --commit
{
  "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
  "epoch": 1,
  "predecessor_uuid": "09559832-67a4-4101-8b3f-10dfcd6b2707",
  "sync_status": [ "[...]"
  ],
  "period_map": {
      "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
      "zonegroups": [
          {
              "id": "d4018b8d-8c0d-4072-8919-608726fa369e",
              "name": "us",
              "api_name": "us",
              "is_master": "true",
              "endpoints": [
                  "http:\/\/rgw1:80"
              ],
              "hostnames": [],
              "hostnames_s3website": [],
              "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "zones": [
                  {
                      "id": "83859a9a-9901-4f00-aa6d-285c777e10f0",
                      "name": "us-east-1",
                      "endpoints": [
                          "http:\/\/rgw1:80"
                      ],
                      "log_meta": "true",
                      "log_data": "false",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  }
              ],
              "placement_targets": [
                  {
                      "name": "default-placement",
                      "tags": []
                  }
              ],
              "default_placement": "default-placement",
              "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
          }
      ],
      "short_zone_ids": [
          {
              "key": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "val": 630926044
          }
      ]
  },
  "master_zonegroup": "d4018b8d-8c0d-4072-8919-608726fa369e",
  "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
  "period_config": {
      "bucket_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      },
      "user_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      }
  },
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7",
  "realm_name": "gold",
  "realm_epoch": 2
}</screen>
   </sect3>
   <sect3 xml:id="ceph-rgw-fed-masterzone-startrgw">
    <title>啟動物件閘道</title>
    <para>
     在啟動物件閘道之前，需要在組態檔案中指定物件閘道區域和連接埠選項。如需物件閘道及其組態的詳細資訊，請參閱<xref linkend="cha-ceph-gw"/>。物件閘道的組態區段應類似下方所示︰
    </para>
<screen>[client.rgw.us-east-1]
rgw_frontends="civetweb port=80"
rgw_zone=us-east-1</screen>
    <para>
     啟動物件閘道︰
    </para>
<screen>sudo systemctl start ceph-radosgw@rgw.us-east-1</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-secondaryzone">
   <title>建立次要區域</title>
   <para>
    在同一個叢集中，建立並設定名為 <literal>us-east-2</literal> 的次要區域。您可在代管主區域自身的節點中執行以下所有指令。
   </para>
   <para>
    若要建立次要區域，請使用建立主區域時所用的相同指令，不過需要去掉 master 旗標︰
   </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin zone create --rgw-zonegroup=us --endpoints=http://rgw2:80 \
--rgw-zone=us-east-2 --access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> --secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable>
{
  "id": "950c1a43-6836-41a2-a161-64777e07e8b8",
  "name": "us-east-2",
  "domain_root": "us-east-2.rgw.data.root",
  "control_pool": "us-east-2.rgw.control",
  "gc_pool": "us-east-2.rgw.gc",
  "log_pool": "us-east-2.rgw.log",
  "intent_log_pool": "us-east-2.rgw.intent-log",
  "usage_log_pool": "us-east-2.rgw.usage",
  "user_keys_pool": "us-east-2.rgw.users.keys",
  "user_email_pool": "us-east-2.rgw.users.email",
  "user_swift_pool": "us-east-2.rgw.users.swift",
  "user_uid_pool": "us-east-2.rgw.users.uid",
  "system_key": {
      "access_key": "1555b35654ad1656d804",
      "secret_key": "h7GhxuBLTrlhVUyxSPUKUV8r\/2EI4ngqJxD7iBdBYLhwluN30JaT3Q=="
  },
  "placement_pools": [
      {
          "key": "default-placement",
          "val": {
              "index_pool": "us-east-2.rgw.buckets.index",
              "data_pool": "us-east-2.rgw.buckets.data",
              "data_extra_pool": "us-east-2.rgw.buckets.non-ec",
              "index_type": 0
          }
      }
  ],
  "metadata_heap": "us-east-2.rgw.meta",
  "realm_id": "815d74c2-80d6-4e63-8cfc-232037f7ff5c"
}</screen>
   <sect3 xml:id="ceph-rgw-fed-secondzone-updateperiod">
    <title>更新期間</title>
    <para>
     透過執行期間更新並提交變更，通知所有閘道有關系統地圖中發生的新變化︰
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin period update --commit
{
  "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
  "epoch": 2,
  "predecessor_uuid": "09559832-67a4-4101-8b3f-10dfcd6b2707",
  "sync_status": [ "[...]"
  ],
  "period_map": {
      "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
      "zonegroups": [
          {
              "id": "d4018b8d-8c0d-4072-8919-608726fa369e",
              "name": "us",
              "api_name": "us",
              "is_master": "true",
              "endpoints": [
                  "http:\/\/rgw1:80"
              ],
              "hostnames": [],
              "hostnames_s3website": [],
              "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "zones": [
                  {
                      "id": "83859a9a-9901-4f00-aa6d-285c777e10f0",
                      "name": "us-east-1",
                      "endpoints": [
                          "http:\/\/rgw1:80"
                      ],
                      "log_meta": "true",
                      "log_data": "false",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  },
                  {
                      "id": "950c1a43-6836-41a2-a161-64777e07e8b8",
                      "name": "us-east-2",
                      "endpoints": [
                          "http:\/\/rgw2:80"
                      ],
                      "log_meta": "false",
                      "log_data": "true",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  }

              ],
              "placement_targets": [
                  {
                      "name": "default-placement",
                      "tags": []
                  }
              ],
              "default_placement": "default-placement",
              "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
          }
      ],
      "short_zone_ids": [
          {
              "key": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "val": 630926044
          },
          {
              "key": "950c1a43-6836-41a2-a161-64777e07e8b8",
              "val": 4276257543
          }

      ]
  },
  "master_zonegroup": "d4018b8d-8c0d-4072-8919-608726fa369e",
  "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
  "period_config": {
      "bucket_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      },
      "user_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      }
  },
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7",
  "realm_name": "gold",
  "realm_epoch": 2
}</screen>
   </sect3>
   <sect3 xml:id="ceph-rgw-fed-secondzone-startrgw">
    <title>啟動物件閘道</title>
    <para>
     調整次要區域的物件閘道組態，並啟動物件閘道︰
    </para>
<screen>[client.rgw.us-east-2]
rgw_frontends="civetweb port=80"
rgw_zone=us-east-2</screen>
<screen><prompt>cephadm &gt; </prompt>sudo systemctl start ceph-radosgw@rgw.us-east-2</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-seccluster">
   <title>將物件閘道新增至第二個叢集</title>
   <para>
    第二個 Ceph 叢集與初始叢集屬於同一個區域群組，不過可以位於不同的地理位置。
   </para>
   <sect3 xml:id="ceph-rgw-fed-seccluster-realm">
    <title>預設領域和區域群組</title>
    <para>
     由於您已建立第一個閘道的領域，因此可在此處提取該領域並將其設為預設領域︰
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin realm pull --url=http://rgw1:80 \
--access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> --secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable>
{
  "id": "4a367026-bd8f-40ee-b486-8212482ddcd7",
  "name": "gold",
  "current_period": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
  "epoch": 2
}
<prompt>cephadm &gt; </prompt>radosgw-admin realm default --rgw-realm=gold</screen>
    <para>
     透過提取期間，從主區域獲取組態︰
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin period pull --url=http://rgw1:80 \
--access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> --secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable></screen>
    <para>
     將已建立的 <literal>us</literal> 區域群組設為預設區域群組︰
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin zonegroup default --rgw-zonegroup=us</screen>
   </sect3>
   <sect3 xml:id="ceph-rgw-fed-seccluster-seczone">
    <title>次要區域組態</title>
    <para>
     使用相同的系統金鑰建立名為 <literal>us-west</literal> 的新區域︰
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin zone create --rgw-zonegroup=us --rgw-zone=us-west \
--access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> --secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable> \
--endpoints=http://rgw3:80 --default
{
  "id": "950c1a43-6836-41a2-a161-64777e07e8b8",
  "name": "us-west",
  "domain_root": "us-west.rgw.data.root",
  "control_pool": "us-west.rgw.control",
  "gc_pool": "us-west.rgw.gc",
  "log_pool": "us-west.rgw.log",
  "intent_log_pool": "us-west.rgw.intent-log",
  "usage_log_pool": "us-west.rgw.usage",
  "user_keys_pool": "us-west.rgw.users.keys",
  "user_email_pool": "us-west.rgw.users.email",
  "user_swift_pool": "us-west.rgw.users.swift",
  "user_uid_pool": "us-west.rgw.users.uid",
  "system_key": {
      "access_key": "1555b35654ad1656d804",
      "secret_key": "h7GhxuBLTrlhVUyxSPUKUV8r\/2EI4ngqJxD7iBdBYLhwluN30JaT3Q=="
  },
  "placement_pools": [
      {
          "key": "default-placement",
          "val": {
              "index_pool": "us-west.rgw.buckets.index",
              "data_pool": "us-west.rgw.buckets.data",
              "data_extra_pool": "us-west.rgw.buckets.non-ec",
              "index_type": 0
          }
      }
  ],
  "metadata_heap": "us-west.rgw.meta",
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
}</screen>
   </sect3>
   <sect3 xml:id="ceph-rgw-fed-seccluster-period">
    <title>更新期間</title>
    <para>
     為了傳播區域群組地圖變更，我們將更新並提交期間︰
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin period update --commit --rgw-zone=us-west
{
  "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
  "epoch": 3,
  "predecessor_uuid": "09559832-67a4-4101-8b3f-10dfcd6b2707",
  "sync_status": [
      "", # truncated
  ],
  "period_map": {
      "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
      "zonegroups": [
          {
              "id": "d4018b8d-8c0d-4072-8919-608726fa369e",
              "name": "us",
              "api_name": "us",
              "is_master": "true",
              "endpoints": [
                  "http:\/\/rgw1:80"
              ],
              "hostnames": [],
              "hostnames_s3website": [],
              "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "zones": [
                  {
                      "id": "83859a9a-9901-4f00-aa6d-285c777e10f0",
                      "name": "us-east-1",
                      "endpoints": [
                          "http:\/\/rgw1:80"
                      ],
                      "log_meta": "true",
                      "log_data": "true",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  },
                                  {
                      "id": "950c1a43-6836-41a2-a161-64777e07e8b8",
                      "name": "us-east-2",
                      "endpoints": [
                          "http:\/\/rgw2:80"
                      ],
                      "log_meta": "false",
                      "log_data": "true",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  },
                  {
                      "id": "d9522067-cb7b-4129-8751-591e45815b16",
                      "name": "us-west",
                      "endpoints": [
                          "http:\/\/rgw3:80"
                      ],
                      "log_meta": "false",
                      "log_data": "true",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  }
              ],
              "placement_targets": [
                  {
                      "name": "default-placement",
                      "tags": []
                  }
              ],
              "default_placement": "default-placement",
              "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
          }
      ],
      "short_zone_ids": [
          {
              "key": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "val": 630926044
          },
          {
              "key": "950c1a43-6836-41a2-a161-64777e07e8b8",
              "val": 4276257543
          },
          {
              "key": "d9522067-cb7b-4129-8751-591e45815b16",
              "val": 329470157
          }
      ]
  },
  "master_zonegroup": "d4018b8d-8c0d-4072-8919-608726fa369e",
  "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
  "period_config": {
      "bucket_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      },
      "user_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      }
  },
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7",
  "realm_name": "gold",
  "realm_epoch": 2
}</screen>
    <para>
     請注意，期間的版本編號已遞增，表示組態發生了變更。
    </para>
   </sect3>
   <sect3 xml:id="ceph-rgw-fed-seccluster-rgwstart">
    <title>啟動物件閘道</title>
    <para>
     此操作與在第一個區域中啟動物件閘道類似。唯一的差別在於，物件閘道區域組態應反映 <literal>us-west</literal> 區域名稱︰
    </para>
<screen>[client.rgw.us-west]
rgw_frontends="civetweb port=80"
rgw_zone=us-west</screen>
    <para>
     啟動第二個物件閘道︰
    </para>
<screen>sudo systemctl start ceph-radosgw@rgw.us-west</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="ceph-rgw-fed-failover">
   <title>容錯移轉和災難備援</title>
   <para>
    如果主區域發生故障，將容錯移轉至次要區域，以實現災難備援。
   </para>
   <procedure>
    <step>
     <para>
      將次要區域設為主區域和預設區域。例如︰
     </para>
<screen>
<prompt>root # </prompt><command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --master --default
     </screen>
     <para>
      依預設，Ceph Object Gateway 將以主動/主動組態執行。如果已將叢集設定為以主動/被動組態執行，則次要區域是唯讀區域。移除 --read-only 狀態可讓區域接收寫入操作。例如︰
     </para>
<screen>
<prompt>root # </prompt><command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --master --default \
--read-only=False
     </screen>
    </step>
    <step>
     <para>
      更新期間，以使變更生效。
     </para>
<screen>
<prompt>root # </prompt><command>radosgw-admin</command> period update --commit
     </screen>
    </step>
    <step>
     <para>
      最後，重新啟動 Ceph Object Gateway。
     </para>
<screen>
<prompt>root # </prompt><command>systemctl</command> restart ceph-radosgw@rgw.`hostname -s`
     </screen>
    </step>
   </procedure>
   <para>
    如果之前的主區域已復原，請還原操作。
   </para>
   <procedure>
    <step>
     <para>
      在已復原的區域中，從目前主區域提取期間。
     </para>
<screen>
<prompt>root # </prompt><command>radosgw-admin</command> period pull --url={url-to-master-zone-gateway} \
--access-key={access-key} --secret={secret}
     </screen>
    </step>
    <step>
     <para>
      將已復原的區域設為主區域和預設區域。
     </para>
<screen>
<prompt>root # </prompt><command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --master --default
     </screen>
    </step>
    <step>
     <para>
      更新期間，以使變更生效。
     </para>
<screen>
<prompt>root # </prompt><command>radosgw-admin</command> period update --commit
     </screen>
    </step>
    <step>
     <para>
      然後，在已復原的區域中重新啟動 Ceph Object Gateway。
     </para>
<screen>
<prompt>root # </prompt><command>systemctl</command> restart ceph-radosgw@rgw.`hostname -s`
     </screen>
    </step>
    <step>
     <para>
      如果次要區域需要採用唯讀組態，請更新次要區域。
     </para>
<screen>
<prompt>root # </prompt><command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --read-only
     </screen>
    </step>
    <step>
     <para>
      更新期間，以使變更生效。
     </para>
<screen>
<prompt>root # </prompt><command>radosgw-admin</command> period update --commit
     </screen>
    </step>
    <step>
     <para>
      最後，在次要區域中重新啟動 Ceph Object Gateway。
     </para>
<screen>
<prompt>root # </prompt><command>systemctl</command> restart ceph-radosgw@rgw.`hostname -s`
     </screen>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="ogw-haproxy">
  <title>使用 HAProxy 在物件閘道伺服器間實現負載平衡</title>

  <para>
   您可以使用 HAProxy 負載平衡器將所有要求分發在多個物件閘道後端伺服器之間。如需設定 HAProxy 的詳細資訊，請參閱<link xlink:href="https://www.suse.com/documentation/sle-ha-12/book_sleha/data/sec_ha_lb_haproxy.html"/>。
  </para>

  <para>
   下面是一種 HAProxy 的簡單組態，使用遞迴平衡演算法來平衡物件閘道節點︰
  </para>

<screen>
<prompt>root # </prompt>cat /etc/haproxy/haproxy.cfg
[...]
frontend <replaceable>https_frontend</replaceable>
bind *:443 crt <replaceable>path-to-cert.pem</replaceable> [ciphers: ... ]
default_backend rgw

backend rgw
mode http
balance roundrobin
server rgw_server1 <replaceable>rgw-endpoint1</replaceable> weight 1 maxconn 100 check
server rgw_server2 <replaceable>rgw-endpoint2</replaceable> weight 1 maxconn 100 check
[...]
</screen>
 </sect1>
</chapter>
