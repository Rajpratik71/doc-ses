<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="admin_install_salt.xml" version="5.0" xml:id="ceph-install-saltstack">
 <title>使用 DeepSea/Salt 部署</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:translation>yes</dm:translation>
        <dm:release>SES 5</dm:release>
      </dm:docmanager>
    </info>
    <note>
  <title>SUSE Enterprise Storage 5 中已移除 <command>ceph-deploy</command></title>
  <para>
   SUSE Enterprise Storage 4 中已廢棄 <command>ceph-deploy</command> 叢集部署工具。從 SUSE Enterprise Storage 5 開始，隨著 DeepSea 的推出，此工具已完全移除。
  </para>
 </note>
 <para>
  Salt 與 DeepSea 是元件的<emphasis>堆疊</emphasis>，可協助您部署和管理伺服器基礎架構。Salt 具有很高的可延展性，速度快，且相對容易執行。在開始使用 Salt 部署叢集之前，請閱讀以下注意事項︰
 </para>
 <itemizedlist>
  <listitem>
   <para>
    <emphasis>Salt Minion</emphasis> 是由一個稱為 Salt Master 的專屬節點控制的節點。Salt Minion 具有角色，例如 Ceph OSD、Ceph Monitor、Ceph Manager、物件閘道、iSCSI 閘道或 NFS Ganesha。
   </para>
  </listitem>
  <listitem>
   <para>
    Salt Master 會執行自己的 Salt Minion。執行特權任務 (例如，建立、授權金鑰以及將金鑰複製到 Minion) 需要 Salt Master，這樣，遠端 Minion 就永遠不需要執行特權任務。
   </para>
   <tip>
    <title>每部伺服器共用多個角色</title>
    <para>
     如果將每個角色都部署在一個獨立節點上，則 Ceph 叢集的效能是最佳的。但實際部署有時會要求多個角色共用一個節點。為避免效能欠佳以及升級程序出現問題，請勿向 Salt Master 部署 Ceph OSD、中繼資料伺服器或 Ceph Monitor 角色。
    </para>
   </tip>
  </listitem>
  <listitem>
   <para>
    Salt Minion 需要能透過網路正確解析 Salt Master 的主機名稱。預設情況下，Minion 會尋找 <systemitem>salt</systemitem> 主機名稱，但您可以在 <filename>/etc/salt/minion</filename> 檔案中指定可透過網路連接的其他任何主機名稱，具體請參閱<xref linkend="ceph-install-stack"/>。
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="cha-ceph-install-relnotes">
  <title>閱讀版本說明</title>

  <para>
   在版本說明中，您可以找到其他有關自 SUSE Enterprise Storage 的上一個版本發行後所進行的變更的資訊。檢查版本說明以瞭解︰
  </para>

  <itemizedlist>
   <listitem>
    <para>
     您的硬體是否有特殊的注意事項。
    </para>
   </listitem>
   <listitem>
    <para>
     所用的任何軟體套件是否已發生重大變更。
    </para>
   </listitem>
   <listitem>
    <para>
     是否需要對您的安裝施行特殊預防措施。
    </para>
   </listitem>
  </itemizedlist>

  <para>
   版本說明還會提供無法及時編入手冊的資訊。它們還包含有關已知問題的說明。
  </para>

  <para>
   安裝套件 <package>release-notes-ses</package>之後，本地的 <filename>/usr/share/doc/release-notes</filename> 目錄中或 <link xlink:href="https://www.suse.com/releasenotes/"/> 網頁上會提供版本說明。
  </para>
 </sect1>
 <sect1 xml:id="deepsea-description">
  <title>DeepSea 簡介</title>

  <para>
   DeepSea 旨在節省管理員的時間，讓他們能夠自信地對 Ceph 叢集執行複雜操作。
  </para>

  <para>
   Ceph 是一款高度可設定的軟體解決方案。它提高了系統管理員的自由度和職責履行能力。
  </para>

  <para>
   最低的 Ceph 設定能夠很好地滿足展示目的，但無法顯示 Ceph 在處理大量節點時可體現的卓越功能。
  </para>

  <para>
   DeepSea 會收集並儲存個別伺服器的相關資料，例如位址和裝置名稱。對於諸如 Ceph 的分散式儲存系統，可能需要收集並儲存數百個這樣的項目。收集資訊並手動將資料輸入至組態管理工具的程序非常耗費精力，並且容易出錯。
  </para>

  <para>
   準備伺服器、收集組態資訊以及設定和部署 Ceph 所需執行的步驟大致相同。但是，這種做法無法解決管理獨立功能的需求。在日常操作中，必須做到不厭其煩地將硬體新增至給定的功能，以及適當地移除硬體。
  </para>

  <para>
   DeepSea 透過以下策略解決了這些需求︰DeepSea 可將管理員的多項決策合併到一個檔案中。這些決策包括叢集指定、角色指定和設定檔指定。此外，DeepSea 還會收集各組任務以組成一個簡單的目標。每個目標就是一個<emphasis>階段</emphasis>︰
  </para>

  <itemizedlist xml:id="deepsea-stage-description">
   <title>DeepSea 階段描述</title>
   <listitem>
    <para>
     <emphasis role="bold">階段 0</emphasis> — <emphasis role="bold">準備</emphasis>︰在此階段，將套用全部所需的更新，並且可能會將您的系統重新開機。
    </para>
    <important>
     <title>將 Salt Master 重新開機後重新執行階段 0</title>
     <para>
      如果在執行階段 0 期間，將 Salt Master 重新開機以載入新核心版本，則您需要再次執行階段 0，否則無法定位 Minion。
     </para>
    </important>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">階段 1</emphasis> — <emphasis role="bold">探查</emphasis>︰在此階段，將偵測叢集中的所有硬體，並收集 Ceph 組態所需的資訊。如需組態的詳細資料，請參閱<xref linkend="deepsea-pillar-salt-configuration"/>。
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">階段 2</emphasis> — <emphasis role="bold">組態</emphasis>︰您需要以特定的格式準備組態資料。
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">階段 3</emphasis> — <emphasis role="bold">部署</emphasis>︰建立包含必要 Ceph 服務的基本 Ceph 叢集。如需必要服務的清單，請參閱<xref linkend="storage-intro-core-nodes"/>。
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">階段 4</emphasis> — <emphasis role="bold">服務</emphasis>︰可在此階段安裝 Ceph 的其他功能，例如 iSCSI、物件閘道和 CephFS。其中每個功能都是選擇性的。
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">階段 5</emphasis> — 移除階段︰此階段不是必需的，在啟始設定期間，通常不需要此階段。在此階段，將會移除 Minion 的角色以及叢集組態。如果您需要從叢集中移除某個儲存節點，則需要執行此階段。如需詳細資料，請參閱<xref linkend="salt-node-removing"/>。
    </para>
   </listitem>
  </itemizedlist>

  <para>
   如需 DeepSea 的更詳細介紹，請造訪 <link xlink:href="https://github.com/suse/deepsea/wiki"/>。
  </para>

  <sect2 xml:id="deepsea-organisation-locations">
   <title>組織和重要位置</title>
   <para>
    Salt 在 Master 節點上使用多個標準位置和多個命名約定︰
   </para>
   <variablelist>
    <varlistentry>
     <term><filename>/srv/pillar</filename>
     </term>
     <listitem>
      <para>
       該目錄儲存叢集 Minion 的組態資料。<emphasis>Pillar</emphasis> 是向所有叢集 Minion 提供全域組態值的介面。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/srv/salt/</filename>
     </term>
     <listitem>
      <para>
       該目錄儲存 Salt 狀態檔案 (也稱為 <emphasis>sls</emphasis> 檔案)。狀態檔案是叢集應處於狀態的帶格式說明。如需詳細資訊，請參閱 <link xlink:href="https://docs.saltstack.com/en/latest/topics/tutorials/starting_states.html">Salt 文件</link>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/srv/module/runners</filename>
     </term>
     <listitem>
      <para>
       該目錄儲存稱為執行程式的 Python 程序檔。執行程式在 Master 節點上執行。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/srv/salt/_modules</filename>
     </term>
     <listitem>
      <para>
       該目錄儲存稱為模組的 Python 程序檔。這些模組將套用於叢集中的所有 Minion。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/srv/pillar/ceph</filename>
     </term>
     <listitem>
      <para>
       該目錄由 DeepSea 使用。收集的組態資料儲存在此處。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/srv/salt/ceph</filename>
     </term>
     <listitem>
      <para>
       DeepSea 使用的目錄。其中儲存了可採用不同格式的 sls 檔案，但 sls 檔案包含在各子目錄中。每個子目錄僅包含一種類型的 sls 檔案。例如，<filename>/srv/salt/ceph/stage</filename> 包含 <command>salt-run state.orchestrate</command> 執行的協調化檔案。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="ds-minion-targeting">
   <title>定位 Minion</title>
   <para>
    DeepSea 指令透過 Salt 基礎架構執行。使用 <command>salt</command> 指令時，您需要指定一組將受到該指令影響的 Salt Minion。我們將該組 Minion 描述為 <command>salt</command> 指令的<emphasis>目標</emphasis>。以下各節說明定位 Minion 的可行方法。
   </para>
   <sect3 xml:id="ds-minion-targeting-name">
    <title>比對 Minion 名稱</title>
    <para>
     您可以透過名稱比對來定位一個或一組 Minion。Minion 的名稱通常為執行該 Minion 的節點的短主機名稱。這是一種一般的 Salt 定位方法，與 DeepSea 無關。您可以使用萬用字元、一般運算式或清單來限制 Minion 名稱的範圍。遵循的一般語法如下︰
    </para>
<screen><prompt>root@master # </prompt>salt <replaceable>target</replaceable> example.module</screen>
    <tip>
     <title>僅限 Ceph 叢集</title>
     <para>
      如果您環境中的所有 Salt Minion 均屬於 Ceph 叢集，則可以安全地使用 <literal>'*'</literal> 取代 <replaceable>target</replaceable>，以包含<emphasis>所有</emphasis>註冊的 Minion。
     </para>
    </tip>
    <para>
     比對 example.net 網域中的所有 Minion (假設 Minion 名稱與其「完整」的主機名稱相同)︰
    </para>
<screen><prompt>root@master # </prompt>salt '*.example.net' test.ping</screen>
    <para>
     比對「web1」Minion 與「web5」Minion︰
    </para>
<screen><prompt>root@master # </prompt>salt 'web[1-5]' test.ping</screen>
    <para>
     使用一般運算式比對「web1-prod」和「web1-devel」Minion︰
    </para>
<screen><prompt>root@master # </prompt>salt -E 'web1-(prod|devel)' test.ping</screen>
    <para>
     比對簡單的 Minion 清單︰
    </para>
<screen><prompt>root@master # </prompt>salt -L 'web1,web2,web3' test.ping</screen>
    <para>
     比對叢集中的所有 Minion︰
    </para>
<screen><prompt>root@master # </prompt>salt '*' test.ping</screen>
   </sect3>
   <sect3 xml:id="ds-minion-targeting-grain">
    <title>使用「deepsea」Grain 進行定位</title>
    <para>
     在一個異質受 Salt 管理環境 (部分節點上部署了 SUSE Enterprise Storage 以及其他叢集解決方案) 中，建議您將「deepsea」Grain 套用於相關 Minion 來進行「標記」。這樣您便可以在無法透過 Minion 名稱比對的環境中輕鬆定位 DeepSea Minion。
    </para>
    <para>
     若要將「deepse」Grain 套用於一組 Minion，請執行以下指令︰
    </para>
<screen><prompt>root@master # </prompt>salt <replaceable>target</replaceable> grains.append deepsea default</screen>
    <para>
     若要從一組 Minion 移除「deepse」Grain，請執行以下指令︰
    </para>
<screen><prompt>root@master # </prompt>salt <replaceable>target</replaceable> grains.delval deepsea destructive=True</screen>
    <para>
     將「deepsea」Grain 套用於相關 Minion 後，您可以執行以下指令來進行定位︰
    </para>
<screen><prompt>root@master # </prompt>salt -G 'deepsea:*' test.ping</screen>
    <para>
     或執行以下等效指令︰
    </para>
<screen><prompt>root@master # </prompt>salt -C 'G@deepsea:*' test.ping</screen>
   </sect3>
   <sect3 xml:id="ds-minion-targeting-dsminions">
    <title>設定 <option>deepsea_minions</option> 選項</title>
    <para>
     設定 <option>deepsea_minions</option> 選項的目標是 DeepSea 部署所需。在階段執行期間，DeepSea 會使用該選項指示 Minion (如需詳細資料，請參閱 <xref linkend="deepsea-stage-description"/>)。
    </para>
    <para>
     若要設定或變更 <option>deepsea_minions</option> 選項，請編輯 Salt Master 上的 <filename>/srv/pillar/ceph/deepsea_minions.sls</filename> 檔案，新增或取代下行︰
    </para>
<screen>deepsea_minions: <replaceable>target</replaceable></screen>
    <tip>
     <title><option>deepsea_minions</option> 目標</title>
     <para>
      對於 <option>deepsea_minions</option> 選項的 <replaceable>target</replaceable>，您可以使用以下任何定位方法︰<xref linkend="ds-minion-targeting-name" xrefstyle="select: title"/>和<xref linkend="ds-minion-targeting-grain" xrefstyle="select: title"/>。
     </para>
     <para>
      比對叢集中的所有 Salt Minion︰
     </para>
<screen>deepsea_minions: '*'</screen>
     <para>
      使用「deepsea」Grain 比對所有 Minion︰
     </para>
<screen>deepsea_minions: 'G@deepsea:*'</screen>
    </tip>
   </sect3>
   <sect3>
    <title>更多資訊</title>
    <para>
     您可以使用 Salt 基礎架構以更進階的方式來定位 Minion。如需所有定位技術的描述，請參閱 <link xlink:href="https://docs.saltstack.com/en/latest/topics/targeting/"/>。
    </para>
    <para>
     此外，還可從「deepsea-minions」手冊頁瞭解有關 DeepSea 定位的更多詳細資料 (<command>man 7 deepsea_minions</command>)。
    </para>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="ceph-install-stack">
  <title>叢集部署</title>

  <para>
   叢集部署程序包括多個階段。首先，需要透過設定 Salt 來準備叢集的所有節點，然後部署並設定 Ceph。
  </para>

  <tip>
   <title>在未定義 OSD 設定檔的情況下部署監控程式節點</title>
   <para>
    如果您需要跳過定義 OSD 設定檔，而先部署監控程式節點，可以透過設定 <option>DEV_ENV</option> 變數來實現。該設定允許您在沒有 <filename>profile/</filename> 目錄的情況下部署監控程式，以及部署至少包含<emphasis>一個</emphasis>儲存、監控程式和管理器節點的叢集。
   </para>
   <para>
    若要設定環境變數，請將其全域啟用，方法是在 <filename>/srv/pillar/ceph/stack/global.yml</filename> 檔案中進行設定，或者僅針對目前的外圍程序工作階段設定︰
   </para>
<screen><prompt>root@master # </prompt>export DEV_ENV=true</screen>
  </tip>

  <para>
   下面詳細說明了叢集準備程序。
  </para>

  <procedure>
   <step>
    <para>
     在叢集的每個節點上安裝並註冊 SUSE Linux Enterprise Server 12 SP3 以及 SUSE Enterprise Storage 延伸。
    </para>
   </step>
   <step>
    <para>
     列出現有的軟體儲存庫，驗證是否已安裝並註冊正確的產品。該清單與以下輸出類似︰
    </para>
<screen>
 <prompt>root@minion &gt; </prompt>zypper lr -E
#  | Alias   | Name                              | Enabled | GPG Check | Refresh
---+---------+-----------------------------------+---------+-----------+--------
 4 | [...]   | SUSE-Enterprise-Storage-5-Pool    | Yes     | (r ) Yes  | No
 6 | [...]   | SUSE-Enterprise-Storage-5-Updates | Yes     | (r ) Yes  | Yes
 9 | [...]   | SLES12-SP3-Pool                   | Yes     | (r ) Yes  | No
11 | [...]   | SLES12-SP3-Updates                | Yes     | (r ) Yes  | Yes
</screen>
   </step>
   <step>
    <para>
     在每個節點上設定網路設定，包括正確的 DNS 名稱解析。Salt Master 和所有 Salt Minion 需要依據各自的主機名稱相互解析。如需設定網路的詳細資訊，請參閱 <link xlink:href="https://www.suse.com/documentation/sles-12/book_sle_admin/data/sec_basicnet_yast.html"/>。如需設定 DNS 伺服器的詳細資訊，請參閱 <link xlink:href="https://www.suse.com/documentation/sles-12/book_sle_admin/data/cha_dns.html"/>。
    </para>
   </step>
   <step>
    <para>
     設定、啟用並啟動 NTP 時間同步伺服器︰
    </para>
<screen><prompt>root@master # </prompt>systemctl enable ntpd.service
<prompt>root@master # </prompt>systemctl start ntpd.service</screen>
    <para>
     如需設定 NTP 的詳細資訊，請參閱 <link xlink:href="https://www.suse.com/documentation/sles-12/book_sle_admin/data/sec_netz_xntp_yast.html"/>。
    </para>
   </step>
   <step>
    <para>
     檢查 AppArmor 服務是否正在執行，並在每個叢集節點上停用該服務。啟動 YaST AppArmor 模組，選取<guimenu>設定</guimenu>，然後取消選取<guimenu>啟用 Apparmor</guimenu> 核取方塊。按一下<guimenu>完成</guimenu>進行確認。
    </para>
    <para>
     請注意，在啟用 AppArmor 的情況下，SUSE Enterprise Storage 將<emphasis>無法</emphasis>正常運作。
    </para>
   </step>
   <step>
    <para>
     在 Salt Master 節點上安裝 <literal>salt-master</literal> 和 <literal>salt-minion</literal> 套件︰
    </para>
<screen><prompt>root@master # </prompt>zypper in salt-master salt-minion</screen>
    <para>
     檢查 <systemitem>salt-master</systemitem> 服務是否已啟用並啟動，並視需要進行啟用和啟動︰
    </para>
<screen><prompt>root@master # </prompt>systemctl enable salt-master.service
<prompt>root@master # </prompt>systemctl start salt-master.service</screen>
   </step>
   <step>
    <para>
     如果您要使用防火牆，請驗證 Salt Master 節點是否為所有 Salt Minion 節點開啟了連接埠 4505 和 4506。如果這些連接埠處於關閉狀態，您可以使用 <command>yast2 firewall</command> 指令並透過允許 <guimenu>SaltStack</guimenu> 服務來開啟這些連接埠。
    </para>
    <warning>
     <title>使用防火牆時，DeepSea 階段失敗</title>
     <para>
      當防火牆處於使用中狀態 (甚至只是設定了防火牆) 時，DeepSea 部署階段會失敗。若要正確完成該階段，需要執行以下指令關閉防火牆
     </para>
<screen>
<prompt>root@master # </prompt>systemctl stop SuSEfirewall2.service
</screen>
     <para>
      或在 <filename>/srv/pillar/ceph/stack/global.yml</filename> 中將 <option>FAIL_ON_WARNING</option> 選項設為「False」︰
     </para>
<screen>
FAIL_ON_WARNING: False
</screen>
    </warning>
   </step>
   <step>
    <para>
     在所有 Minion 節點上安裝 <literal>salt-minion</literal> 套件。
    </para>
<screen><prompt>root@minion &gt; </prompt>zypper in salt-minion</screen>
    <para>
     請確定所有其他節點都可將每個節點的<emphasis>完全合格的網域名稱</emphasis>解析為公用網路 IP 位址。
    </para>
   </step>
   <step>
    <para>
     設定所有 Minion (包括 Master Minion) 以連接至 Master。如果無法透過主機名稱 <literal>salt</literal> 連接 Salt Master，請編輯檔案 <filename>/etc/salt/minion</filename>，或建立包含以下內容的新檔案 <filename>/etc/salt/minion.d/master.conf</filename>︰
    </para>
<screen>master: <replaceable>host_name_of_salt_master</replaceable></screen>
    <para>
     如果對上述組態檔案執行了任何變更，請在所有 Salt Minion 上重新啟動 Salt 服務︰
    </para>
<screen><prompt>root@minion &gt; </prompt>systemctl restart salt-minion.service</screen>
   </step>
   <step>
    <para>
     檢查所有節點上是否已啟用並啟動 <systemitem>salt-minion</systemitem> 服務。依據需要啟用並啟動該服務︰
    </para>
<screen><prompt>root@minion &gt; </prompt>systemctl enable salt-minion.service
<prompt>root@minion &gt; </prompt>systemctl start salt-minion.service</screen>
   </step>
   <step>
    <para>
     驗證每個 Salt Minion 的指紋，如果指紋相符，則接受 Salt Master 上的所有 Salt 金鑰。
    </para>
    <para>
     檢視每個 Minion 的指紋︰
    </para>
<screen><prompt>root@minion &gt; </prompt>salt-call --local key.finger
local:
3f:a3:2f:3f:b4:d3:d9:24:49:ca:6b:2c:e1:6c:3f:c3:83:37:f0:aa:87:42:e8:ff...</screen>
    <para>
     收集到所有 Salt Minion 的指紋後，將列出 Salt Master 上所有未接受 Minion 金鑰的指紋︰
    </para>
<screen><prompt>root@master # </prompt>salt-key -F
[...]
Unaccepted Keys:
minion1:
3f:a3:2f:3f:b4:d3:d9:24:49:ca:6b:2c:e1:6c:3f:c3:83:37:f0:aa:87:42:e8:ff...</screen>
    <para>
     如果 Minion 的指紋相符，則接受這些金鑰︰
    </para>
<screen><prompt>root@master # </prompt>salt-key --accept-all</screen>
   </step>
   <step>
    <para>
     驗證是否已接受金鑰︰
    </para>
<screen><prompt>root@master # </prompt>salt-key --list-all</screen>
   </step>
   <step xml:id="deploy-wiping-disk">
    <para>
     在部署 SUSE Enterprise Storage 之前，請確定先前的叢集用做 OSD 的所有磁碟均為空白且不包含分割區。為確定這一點，您需要手動抹除所有磁碟。請記得使用正確的磁碟代號取代「X」︰
    </para>
    <substeps>
     <step>
      <para>
       停止使用特定磁碟的所有程序。
      </para>
     </step>
     <step>
      <para>
       驗證磁碟上是否掛接有任何分割區，並視需要進行卸載。
      </para>
     </step>
     <step>
      <para>
       如果磁碟由 LVM 管理，請停用整個 LVM 基礎架構並將其刪除。如需更多詳細資料，請參閱 <link xlink:href="https://www.suse.com/documentation/sles-12/stor_admin/data/cha_lvm.html"/>。
      </para>
     </step>
     <step>
      <para>
       如果磁碟是 MD RAID 的一部分，請停用 RAID。如需更多詳細資料，請參閱 <link xlink:href="https://www.suse.com/documentation/sles-12/stor_admin/data/part_software_raid.html"/>。
      </para>
     </step>
     <step>
      <tip>
       <title>將伺服器重新開機</title>
       <para>
        如果您在執行以下步驟時收到諸如「分割區正在使用」或「無法使用新的分割區表更新核心」之類的錯誤訊息，請將伺服器重新開機。
       </para>
      </tip>
      <para>
       抹除每個分割區的開頭部分︰
      </para>
<screen>for partition in /dev/sdX[0-9]*
do
  dd if=/dev/zero of=$partition bs=4096 count=1 oflag=direct
done</screen>
     </step>
     <step>
      <para>
       抹除分割區表︰
      </para>
<screen>sgdisk -Z --clear -g /dev/sdX</screen>
     </step>
     <step>
      <para>
       抹除備份分割區表︰
      </para>
<screen>size=`blockdev --getsz /dev/sdX`
position=$((size/4096 - 33))
dd if=/dev/zero of=/dev/sdX bs=4M count=33 seek=$position oflag=direct</screen>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     在 Salt Master 節點上安裝 DeepSea︰
    </para>
<screen><prompt>root@master # </prompt>zypper in deepsea</screen>
   </step>
   <step>
    <para>
     檢查 Salt Master 上的檔案 <filename>/srv/pillar/ceph/master_minion.sls</filename> 是否指向您的 Salt Master。如果可以透過其他主機名稱連接您的 Salt Master，請使用儲存叢集適用的主機名稱。如果在 <emphasis>ses</emphasis> 網域中使用 Salt Master 的預設主機名稱 <emphasis>salt</emphasis>，則該檔案如下所示︰
    </para>
<screen>master_minion: salt.ses</screen>
   </step>
  </procedure>

  <para>
   現在部署並設定 Ceph。除非另有說明，否則必須執行所有步驟。
  </para>

  <note>
   <title>Salt 指令慣例</title>
   <para>
    您可透過兩種方式執行 <command>salt-run state.orch</command>，一種方式是使用 <literal>stage.&lt;stage number&gt;</literal>，另一種方式是使用階段的名稱。這兩種標記法會產生相同的效果，至於使用哪個指令，完全取決於您的偏好。
   </para>
  </note>

  <procedure xml:id="ds-depl-stages">
   <title>執行部署階段</title>
   <step>
    <para>
     包含屬於目前正在部署的 Ceph 叢集的 Salt Minion。如需定位 Minion 的詳細資訊，請參閱<xref linkend="ds-minion-targeting-name"/>。
    </para>
   </step>
   <step>
    <para>
     準備叢集。如需更多詳細資料，請參閱<xref linkend="deepsea-stage-description"/>。
    </para>
<screen><prompt>root@master # </prompt>salt-run state.orch ceph.stage.0</screen>
    <para>
     或
    </para>
<screen><prompt>root@master # </prompt>salt-run state.orch ceph.stage.prep</screen>
    <note>
     <title>使用 DeepSea CLI 執行或監控階段</title>
     <para>
      使用 DeepSea CLI，可透過在監控模式下執行 DeepSea CLI，或者直接透過 DeepSea CLI 執行階段，來即時追蹤階段執行進度。如需詳細資料，請參閱<xref linkend="deepsea-cli"/>。
     </para>
    </note>
   </step>
   <step>
    <para>
     <emphasis>選擇性</emphasis>︰為 <filename>/var/lib/ceph/</filename> 建立 Btrfs 子磁碟區。只能在執行 DeepSea 的後續階段之前執行此步驟。若要移轉現有目錄或瞭解更多詳細資料，請參閱<xref linkend="storage-tips-ceph-btrfs-subvol"/>。
    </para>
<screen><prompt>root@master # </prompt>salt-run state.orch ceph.migrate.subvolume</screen>
   </step>
   <step>
    <para>
     探查階段會從所有 Minion 收集資料並建立組態片段，這些片段儲存在 <filename>/srv/pillar/ceph/proposals</filename> 目錄中。資料以 YAML 格式儲存在 *.sls 或 *.yml 檔案中。
    </para>
<screen><prompt>root@master # </prompt>salt-run state.orch ceph.stage.1</screen>
    <para>
     或
    </para>
<screen><prompt>root@master # </prompt>salt-run state.orch ceph.stage.discovery</screen>
   </step>
   <step>
    <para>
     成功完成上述指令後，請在 <filename>/srv/pillar/ceph/proposals</filename> 中建立 <filename>policy.cfg</filename> 檔案。如需詳細資料，請參閱<xref linkend="policy-configuration"/>。
    </para>
    <tip>
     <para>
      如果需要變更叢集的網路設定，請編輯 <filename>/srv/pillar/ceph/stack/ceph/cluster.yml</filename>，調整以 <literal>cluster_network:</literal> 和 <literal>public_network:</literal> 開頭的行。
     </para>
    </tip>
   </step>
   <step>
    <para>
     組態階段將會剖析 <filename>policy.cfg</filename> 檔案，並將包含的檔案合併為其最終形式。叢集和角色相關的內容放置於 <filename>/srv/pillar/ceph/cluster</filename> 中，而 Ceph 特定的內容放置於 <filename>/srv/pillar/ceph/stack/default</filename> 中。
    </para>
    <para>
     執行以下指令以觸發組態階段︰
    </para>
<screen><prompt>root@master # </prompt>salt-run state.orch ceph.stage.2</screen>
    <para>
     或
    </para>
<screen><prompt>root@master # </prompt>salt-run state.orch ceph.stage.configure</screen>
    <para>
     組態步驟可能需要數秒完成。指令完成後，您可以透過執行以下指令，檢視指定 Minion (例如，名為 <literal>ceph_minion1</literal>、<literal>ceph_minion2</literal> 等的 Minion) 的 pillar 資料︰
    </para>
<screen><prompt>root@master # </prompt>salt 'ceph_minion*' pillar.items</screen>
    <note>
     <title>覆寫預設值</title>
     <para>
      一旦指令完成，您便可檢視預設組態並視需要進行變更。如需詳細資料，請參閱<xref linkend="ceph-deploy-ds-custom"/>。
     </para>
    </note>
   </step>
   <step>
    <para>
     現在執行部署階段。在此階段，將會驗證 pillar，並在儲存節點上啟動監控程式和 OSD 精靈。執行以下指令以啟動該階段︰
    </para>
<screen><prompt>root@master # </prompt>salt-run state.orch ceph.stage.3</screen>
    <para>
     或
    </para>
<screen><prompt>root@master # </prompt>salt-run state.orch ceph.stage.deploy
    </screen>
    <para>
     執行該指令需要幾分鐘時間。如果該指令失敗，則您需要解決問題，然後再次執行前面的階段。該指令成功後，請執行以下指令來檢查狀態︰
    </para>
<screen><prompt>root@master # </prompt>ceph -s</screen>
   </step>
   <step>
    <para>
     Ceph 叢集部署程序的最後一個步驟是<emphasis>服務</emphasis>階段。在此階段，您要例項化目前支援的所有服務︰iSCSI 閘道、CephFS、物件閘道、openATTIC 和 NFS Ganesha。此階段將建立所需的池、授權金鑰圈和啟動服務。若要啟動該階段，請執行以下指令︰
    </para>
<screen><prompt>root@master # </prompt>salt-run state.orch ceph.stage.4</screen>
    <para>
     或
    </para>
<screen><prompt>root@master # </prompt>salt-run state.orch ceph.stage.services</screen>
    <para>
     視具體設定而定，該指令可能會執行幾分鐘時間。
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="deepsea-cli">
  <title>DeepSea CLI</title>

  <para>
   DeepSea 還提供了一個 CLI 工具，供使用者監控或執行階段，同時即時將執行進度視覺化。
  </para>

  <para>
   支援使用以下兩種模式來視覺化階段的執行進度︰
  </para>

  <itemizedlist xml:id="deepsea-cli-modes">
   <title>DeepSea CLI 模式</title>
   <listitem>
    <para>
     <emphasis role="bold">監控模式</emphasis>︰視覺化另一個終端工作階段中發出的 <command>salt-run</command> 指令所觸發 DeepSea 階段的執行進度。
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">獨立模式</emphasis>︰執行 DeepSea 階段，並在該階段的組成步驟執行時提供相應的即時視覺化效果。
    </para>
   </listitem>
  </itemizedlist>

  <important>
   <title>DeepSea CLI 指令</title>
   <para>
    只能使用 <systemitem class="username">root</systemitem> 特權在 Salt Master 節點中執行 DeepSea CLI 指令。
   </para>
  </important>

  <sect2 xml:id="deepsea-cli-monitor">
   <title>DeepSea CLI︰監控模式</title>
   <para>
    進度監控程式提供詳細的即時視覺化效果，顯示在其他終端機工作階段中使用 <command>salt-run state.orch</command> 指令執行階段期間發生的情況。
   </para>
   <para>
    在執行任何 <command>salt-run state.orch</command> 指令之前，需要啟動監控程式，使其可以偵測到階段的執行已開始。
   </para>
   <para>
    如果在發出 <command>salt-run state.orch</command> 指令之後再啟動監控程式，將不會顯示執行進度。
   </para>
   <para>
    您可執行以下指令來啟動監控模式︰
   </para>
<screen><prompt>root@master # </prompt>deepsea monitor</screen>
   <para>
    如需 <command>deepsea monitor</command> 指令的可用指令行選項的詳細資訊，請查看該指令的手冊頁︰
   </para>
<screen><prompt>root@master # </prompt>man deepsea-monitor</screen>
  </sect2>

  <sect2 xml:id="deepsea-cli-standalone">
   <title>DeepSea CLI︰獨立模式</title>
   <para>
    在獨立模式下，可以使用 DeepSea CLI 來執行 DeepSea 階段，並即時顯示其執行進度。
   </para>
   <para>
    從 DeepSea CLI 執行 DeepSea 階段的指令遵循以下格式︰
   </para>
<screen><prompt>root@master # </prompt>deepsea stage run <replaceable>stage-name</replaceable></screen>
   <para>
    其中，<replaceable>stage-name</replaceable> 對應於 Salt 協調化狀態檔案的參考方式。例如，對應於 <emphasis role="bold">/srv/salt/ceph/stage/deploy</emphasis> 中目錄的<filename>部署</filename>階段以 <emphasis role="bold">ceph.stage.deploy</emphasis> 的形式參考。
   </para>
   <para>
    此指令可取代用於執行 DeepSea 階段 (或任何 DeepSea 協調化狀態檔案) 的基於 Salt 的指令。
   </para>
   <para>
    指令 <command>deepsea stage run ceph.stage.0</command> 與 <command>salt-run state.orch ceph.stage.0</command> 等效。
   </para>
   <para>
    如需 <command>deepsea stage run</command> 指令接受的可用指令行選項的詳細資訊，請查看該指令的手冊頁︰
   </para>
<screen><prompt>root@master # </prompt>man deepsea-stage run</screen>
   <para>
    下圖顯示了執行<emphasis role="underline">階段 2</emphasis> 時，DeepSea CLI 的輸出範例︰
   </para>
   <figure>
    <title>DeepSea CLI 階段執行進度輸出</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="deepsea-cli-stage2-screenshot.png" width="70%" format="PNG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="deepsea-cli-stage2-screenshot.png" width="70%" format="PNG"/>
     </imageobject>
    </mediaobject>
   </figure>
   <sect3 xml:id="deepsea-cli-run-alias">
    <title>DeepSea CLI <command>stage run</command> 別名</title>
    <para>
     針對 Salt 的進階使用者，我們還支援使用別名來執行 DeepSea 階段，採用執行階段所用的 Salt 指令 (例如 <command>salt-run state.orch <replaceable>stage-name</replaceable></command>) 做為 DeepSea CLI 的指令。
    </para>
    <para>
     範例︰
    </para>
<screen><prompt>root@master # </prompt>deepsea salt-run state.orch <replaceable>stage-name</replaceable></screen>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="deepsea-pillar-salt-configuration">
  <title>組態和自訂</title>

  <sect2 xml:id="policy-configuration">
   <title><filename>policy.cfg</filename> 檔案</title>
   <para>
    <filename>/srv/pillar/ceph/proposals/policy.cfg</filename> 組態檔案用於確定個別叢集節點的角色。例如，哪個節點充當 OSD，或哪個節點充當監控程式節點。請編輯 <filename>policy.cfg</filename>，以反映所需的叢集設定。區段採用任意順序，但所包含行的內容將覆寫前面行的內容中相符的金鑰。
   </para>
   <tip>
    <title><filename>policy.cfg</filename> 的範例</title>
    <para>
     您可以在 <filename>/usr/share/doc/packages/deepsea/examples/</filename> 目錄中找到完整規則檔案的多個範例。
    </para>
   </tip>
   <sect3 xml:id="policy-cluster-assignment">
    <title>叢集指定</title>
    <para>
     在 <emphasis role="bold">cluster</emphasis> 區段中選取叢集的 Minion。您可以選取所有 Minion，也可以將 Minion 加入黑名單或白名單。下面顯示了名為 <emphasis role="bold">ceph</emphasis> 的叢集的範例。
    </para>
    <para>
     若要包含<emphasis role="bold">所有</emphasis> Minion，請新增以下幾行︰
    </para>
<screen>cluster-ceph/cluster/*.sls</screen>
    <para>
     若要將特定的 Minion 加入<emphasis role="bold">白名單</emphasis>，請執行以下指令︰
    </para>
<screen>cluster-ceph/cluster/abc.domain.sls</screen>
    <para>
     若要將一組 Minion 加入白名單，可以使用外圍程序萬用字元︰
    </para>
<screen>cluster-ceph/cluster/mon*.sls</screen>
    <para>
     若要將 Minion 加入<emphasis role="bold">黑名單</emphasis>，可將其設定為 <literal>unassigned</literal>︰
    </para>
<screen>cluster-unassigned/cluster/client*.sls</screen>
   </sect3>
   <sect3 xml:id="policy-role-assignment">
    <title>角色指定</title>
    <para>
     本節詳細介紹了如何為您的叢集節點指定「角色」。在本文中，「角色」是指您需要在節點上執行的服務，例如 Ceph Monitor、物件閘道、iSCSI 閘道或 openATTIC。不會自動指定任何角色，只會部署已新增到 <command>policy.cfg</command> 中的角色。
    </para>
    <para>
     指定遵循以下模式︰
    </para>
<screen>role-<replaceable>ROLE_NAME</replaceable>/<replaceable>PATH</replaceable>/<replaceable>FILES_TO_INCLUDE</replaceable></screen>
    <para>
     其中的項目具有以下意義和值︰
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <replaceable>ROLE_NAME</replaceable> 為下列任何一項︰「master」、「admin」、「mon」、「mgr」、「mds」、「igw」、「rgw」、「ganesha」或「openattic」。
      </para>
     </listitem>
     <listitem>
      <para>
       <replaceable>PATH</replaceable> 是 .sls 或 .yml 檔案的相對目錄路徑。對於 .sls 檔案，該路徑通常是 <filename>cluster</filename>；而 .yml 檔案則位於 <filename>stack/default/ceph/minions</filename>。
      </para>
     </listitem>
     <listitem>
      <para>
       <replaceable>FILES_TO_INCLUDE</replaceable> 是 Salt 狀態檔案或 YAML 組態檔案。該檔案通常包含 Salt Minion 主機名稱，例如 <filename>ses5min2.yml</filename>。您可以使用外圍程序萬用字元進行更具體的相符。
      </para>
     </listitem>
    </itemizedlist>
    <para>
     每個角色的範例如下︰
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <emphasis>master</emphasis> - 該節點具有所有 Ceph 叢集的管理金鑰圈。目前僅支援一個 Ceph 叢集。由於 <emphasis>master</emphasis> 角色是必需的，因此，請一律新增類似下方所示的行︰
      </para>
<screen>role-master/cluster/master*.sls</screen>
     </listitem>
     <listitem>
      <para>
       <emphasis>admin</emphasis> - 該 Minion 將取得管理金鑰圈。您可按如下方式定義角色︰
      </para>
<screen>role-admin/cluster/abc*.sls</screen>
     </listitem>
     <listitem>
      <para>
       <emphasis>mon</emphasis> - 該 Minion 將向 Ceph 叢集提供監控服務。此角色需要已指定 Minion 的位址。從 SUSE Enterprise Storage 5 開始，將以動態方式計算公用位址，並且 Salt Pillar 中不再需要該位址。
      </para>
<screen>role-mon/cluster/mon*.sls</screen>
      <para>
       該範例將監控角色指定給一組 Minion。
      </para>
     </listitem>
     <listitem>
      <para>
       <emphasis>mgr</emphasis> - 從整個叢集收集所有狀態資訊的 Ceph Manager 精靈。請將它部署在您想要部署 Ceph Monitor 角色的所有 Minion 上。
      </para>
<screen>role-mgr/cluster/mgr*.sls</screen>
     </listitem>
     <listitem>
      <para>
       <emphasis>mds</emphasis> - 該 Minion 將提供中繼資料服務以支援 CephFS。
      </para>
<screen>role-mds/cluster/mds*.sls</screen>
     </listitem>
     <listitem>
      <para>
       <emphasis>igw</emphasis> - 該 Minion 將充當 iSCSI 閘道。此角色需要所指定 Minion 的位址，因此，您還需要包含 <filename>stack</filename> 目錄中的檔案︰
      </para>
<screen>role-igw/stack/default/ceph/minions/xyz.domain.yml
role-igw/cluster/*.sls</screen>
     </listitem>
     <listitem>
      <para>
       <emphasis>rgw</emphasis> - 該 Minion 將充當物件閘道︰
      </para>
<screen>role-rgw/cluster/rgw*.sls</screen>
     </listitem>
     <listitem>
      <para>
       <emphasis>openattic</emphasis> - 該 Minion 將充當 openATTIC 伺服器︰
      </para>
<screen>role-openattic/cluster/openattic*.sls</screen>
      <para>
       如需詳細資訊，請參閱<xref linkend="ceph-oa"/>。
      </para>
     </listitem>
     <listitem>
      <para>
       <emphasis>ganesha</emphasis> - 該 Minion 將充當 NFS Ganesha 伺服器。「ganesha」角色需要叢集中的「rgw」或「mds」角色，否則，驗證將於階段 3 失敗。
      </para>
      <para>
       若要成功安裝 NFS Ganesha，需要進行額外的設定。如果您要使用 NFS Ganesha，請在執行階段 2 和 4 之前閱讀<xref linkend="cha-as-ganesha"/>。但是，也可於稍後再安裝 NFS Ganesha。
      </para>
      <para>
       在某些情況下，為 NFS Ganesha 節點定義自訂角色可能很有用。如需詳細資料，請參閱<xref linkend="ceph-nfsganesha-customrole"/>。
      </para>
     </listitem>
    </itemizedlist>
    <note>
     <title>叢集節點的多個角色</title>
     <para>
      您可將多個角色指定給一個節點。例如，可將 mds 角色指定給監控程式節點︰
     </para>
<screen>role-mds/cluster/mon[1,2]*.sls</screen>
    </note>
   </sect3>
   <sect3 xml:id="policy-common-configuration">
    <title>通用組態</title>
    <para>
     通用組態區段包括<emphasis>探查 (階段 1) </emphasis>期間產生的組態檔案。這些組態檔案儲存 <literal>fsid</literal> 或 <literal>public_network</literal> 等參數。若要包含所需的 Ceph 通用組態，請新增以下幾行︰
    </para>
<screen>config/stack/default/global.yml
config/stack/default/ceph/cluster.yml</screen>
   </sect3>
   <sect3 xml:id="policy-profile-assignment">
    <title>設定檔指定</title>
    <para>
     在 Ceph 中，單一儲存角色並不足以描述同一硬體中可用的許多磁碟組態。DeepSea 階段 1 將產生預設的儲存設定檔提案。預設情況下，此提案是一個 <literal>bluestore</literal> 設定檔，它會嘗試針對給定的硬體設定提議效能最高的組態。例如，外部記錄優先於包含物件和中繼資料的單一磁碟。固態儲存優先於旋轉磁碟。與角色類似，設定檔在 <filename>policy.cfg</filename> 中指定。
    </para>
    <para>
     您可在 profile-default 目錄樹中找到預設提案。若要包含這種指定，請將以下兩行新增到 <filename>policy.cfg</filename>。
    </para>
<screen>profile-default/cluster/*.sls
profile-default/stack/default/ceph/minions/*.yml</screen>
    <para>
     您也可以使用提案執行程式，依據喜好建立自訂的儲存設定檔。此執行程式提供三個方法︰help、peek 和 populate。
    </para>
    <para>
     <command>salt-run proposal.help</command> 列印執行程式接受的各個引數的相關説明文字。
    </para>
    <para>
     <command>salt-run proposal.peek</command> 依據傳遞的引數顯示產生的提案。
    </para>
    <para>
     <command>salt-run proposal.populate</command> 將提案寫入 <filename>/srv/pillar/ceph/proposals</filename> 子目錄。傳遞 <option>name=myprofile</option> 可為儲存設定檔命名。這會產生 profile-myprofile 子目錄。
    </para>
    <para>
     對於所有的其他引數，請參閱 <command>salt-run proposal.help</command> 的輸出。
    </para>
   </sect3>
   <sect3 xml:id="ds-profile-osd-encrypted">
    <title>部署加密的 OSD</title>
    <para>
     從 SUSE Enterprise Storage 5 開始，預設會使用 BlueStore 而非 FileStore 來部署 OSD。雖然 BlueStore 支援加密，但預設以非加密模式部署 Ceph OSD。我們假設部署 OSD 時使用的資料和 WAL/DB 磁碟都是乾淨的，且沒有分割區。如果先前曾使用過該磁碟，請執行<xref linkend="deploy-wiping-disk"/>中所述的程序進行抹除。
    </para>
    <para>
     若要在您的新部署中使用加密的 OSD，請搭配 <option>encryption=dmcrypt</option> 引數使用 <literal>proposal.populate</literal> 執行程式︰
    </para>
<screen>
<prompt>root@master # </prompt>salt-run proposal.populate encryption=dmcrypt
</screen>
   </sect3>
   <sect3 xml:id="deepsea-policy-filtering">
    <title>項目過濾</title>
    <para>
     有時，使用 *.sls 萬用字元無法包含給定目錄中的所有檔案。<filename>policy.cfg</filename> 檔案剖析器可識別以下過濾器︰
    </para>
    <warning>
     <title>進階方法</title>
     <para>
      本節介紹供進階使用者使用的過濾方法。如果使用不當，過濾可能會導致問題發生，例如，節點編號改變。
     </para>
    </warning>
    <variablelist>
     <varlistentry>
      <term>slice=[start:end]</term>
      <listitem>
       <para>
        使用 slice 過濾器可以僅包含從 <emphasis>start</emphasis> 到 <emphasis>end-1</emphasis> 的項目。請注意，給定目錄中的項目將依英數字元順序排序。下行包含 <filename>role-mon/cluster/</filename> 子目錄中的第三到第五個檔案︰
       </para>
<screen>role-mon/cluster/*.sls slice[3:6]</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>re=regexp</term>
      <listitem>
       <para>
        使用一般運算式過濾器可以僅包含與給定運算式相符的項目。例如︰
       </para>
<screen>role-mon/cluster/mon*.sls re=.*1[135]\.subdomainX\.sls$</screen>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3 xml:id="deepsea-example-policy-cfg">
    <title>例如 <filename>policy.cfg</filename> 檔案</title>
    <para>
     下面是一個基本 <filename>policy.cfg</filename> 檔案的範例︰
    </para>
<screen>## Cluster Assignment
cluster-ceph/cluster/*.sls <co xml:id="co-policy-1"/>

## Roles
# ADMIN
role-master/cluster/examplesesadmin.sls <co xml:id="co-policy-2"/>
role-admin/cluster/sesclient*.sls <co xml:id="co-policy-3"/>

# MON
role-mon/cluster/ses-example-[123].sls <co xml:id="co-policy-5"/>

# MGR
role-mgr/cluster/ses-example-[123].sls <co xml:id="co-policy-mgr"/>

# MDS
role-mds/cluster/ses-example-4.sls <co xml:id="co-policy-6"/>

# IGW
role-igw/stack/default/ceph/minions/ses-example-4.yml <co xml:id="co-policy-7"/>
role-igw/cluster/ses-example-4.sls <co xml:id="co-policy-10"/>

# RGW
role-rgw/cluster/ses-example-4.sls <co xml:id="co-policy-11"/>

# openATTIC
role-openattic/cluster/openattic*.sls <co xml:id="co-policy-oa"/>

# COMMON
config/stack/default/global.yml <co xml:id="co-policy-8"/>
config/stack/default/ceph/cluster.yml <co xml:id="co-policy-13"/>

## Profiles
profile-default/cluster/*.sls <co xml:id="co-policy-9"/>
profile-default/stack/default/ceph/minions/*.yml <co xml:id="co-policy-12"/></screen>
    <calloutlist>
     <callout arearefs="co-policy-1">
      <para>
       指示在 Ceph 叢集中包含所有 Minion。如果您不想在 Ceph 叢集中包含某些 Minion，請使用︰
      </para>
<screen>cluster-unassigned/cluster/*.sls
cluster-ceph/cluster/ses-example-*.sls</screen>
      <para>
       第一行將所有 Minion 標記為未指定。第二行覆寫與「ses-example-*.sls」相符的 Minion，並將其指定給 Ceph 叢集。
      </para>
     </callout>
     <callout arearefs="co-policy-2">
      <para>
       名為「examplesesadmin」的 Minion 具有「master」角色。順便指出，這表示該 Minion 將取得叢集的管理金鑰。
      </para>
     </callout>
     <callout arearefs="co-policy-3">
      <para>
       與「sesclient*」相符的所有 Minion 也將取得管理金鑰。
      </para>
     </callout>
     <callout arearefs="co-policy-5">
      <para>
       與「ses-example-[123]」相符的所有 Minion (應該是 ses-example-1、ses-example-2 和 ses-example-3 這三個 Minion) 將設定為 MON 節點。
      </para>
     </callout>
     <callout arearefs="co-policy-mgr">
      <para>
       與「ses-example-[123]」相符的所有 Minion (範例中的所有 MON 節點) 將設定為 MGR 節點。
      </para>
     </callout>
     <callout arearefs="co-policy-6">
      <para>
       Minion「ses-example-4」將具有 MDS 角色。
      </para>
     </callout>
     <callout arearefs="co-policy-7">
      <para>
       確定 DeepSea 可識別 IGW 節點的 IP 位址。
      </para>
     </callout>
     <callout arearefs="co-policy-10">
      <para>
       Minion「ses-example-4」將具有 IGW 角色。
      </para>
     </callout>
     <callout arearefs="co-policy-11">
      <para>
       Minion「ses-example-4」將具有 RGW 角色。
      </para>
     </callout>
     <callout arearefs="co-policy-oa">
      <para>
       指定要部署 openATTIC 使用者介面來管理 Ceph 叢集。請參閱<xref linkend="ceph-oa"/>，以取得詳細資料。
      </para>
     </callout>
     <callout arearefs="co-policy-8">
      <para>
       表示我們接受 <option>fsid</option> 和 <option>public_network</option> 等通用組態參數的預設值。
      </para>
     </callout>
     <callout arearefs="co-policy-13">
      <para>
       表示我們接受 <option>fsid</option> 和 <option>public_network</option> 等通用組態參數的預設值。
      </para>
     </callout>
     <callout arearefs="co-policy-9">
      <para>
       告知 DeepSea 要為每個 Minion 使用預設的硬體設定檔。選擇預設的硬體設定檔意味著我們要將所有附加磁碟 (根磁碟除外) 用做 OSD。
      </para>
     </callout>
     <callout arearefs="co-policy-12">
      <para>
       告知 DeepSea 要為每個 Minion 使用預設的硬體設定檔。選擇預設的硬體設定檔意味著我們要將所有附加磁碟 (根磁碟除外) 用做 OSD。
      </para>
     </callout>
    </calloutlist>
   </sect3>
  </sect2>

  <sect2>
   <title>自訂 <filename>ceph.conf</filename> 檔案</title>
   <para>
    如果需要將自訂設定放入 <filename>ceph.conf</filename> 組態檔案，請參閱<xref linkend="ds-custom-cephconf"/>瞭解更多詳細資料。
   </para>
  </sect2>
 </sect1>
</chapter>
