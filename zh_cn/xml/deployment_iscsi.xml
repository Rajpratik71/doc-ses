<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="deployment_iscsi.xml" version="5.0" xml:id="cha-ceph-as-iscsi">

 <title>安装 iSCSI 网关</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:maintainer>tbazant@suse.com</dm:maintainer>
        <dm:status>编辑</dm:status>
        <dm:deadline/>
        <dm:priority/>
        <dm:translation>yes</dm:translation>
        <dm:languages/>
        <dm:release>SES 5</dm:release>
      </dm:docmanager>
    </info>
    <para>
  iSCSI 是一种存储区域网络 (SAN) 协议，可让客户端（称作<emphasis>发起程序</emphasis>）将 SCSI 命令发送到远程服务器上的 SCSI 存储设备（<emphasis>目标</emphasis>）。SUSE Enterprise Storage 包含一个可通过 iSCSI 协议向异构客户端（例如 Microsoft Windows* 和 VMware* vSphere）开放 Ceph 存储管理的工具。多路径 iSCSI 访问可让这些客户端实现可用性与可伸缩性，标准化 iSCSI 协议还在客户端与 SUSE Enterprise Storage 集群之间额外提供了一层安全隔离。该配置工具名为 <systemitem>lrbd</systemitem>。使用 <systemitem>lrbd</systemitem>，Ceph 存储管理员可以定义精简配置且复制的高可用性卷，用于支持只读快照、读写克隆资源，以及 Ceph RADOS 块设备 (RBD) 的自动大小调整。然后，管理员可以通过单个 <systemitem>lrbd</systemitem> 网关主机或支持多路径故障转移的多个网关主机来导出卷。Linux、Microsoft Windows 和 VMware 主机可以使用 iSCSI 协议连接到卷，因此可像任何其他 SCSI 块设备一样供您使用。这意味着，SUSE Enterprise Storage 客户可在 Ceph 上有效运行完整的块存储基础架构子系统，享用传统 SAN 的所有功能和优势，促成将来的发展。
 </para>
 <para>
  本章详细介绍如何设置 Ceph 集群基础架构和 iSCSI 网关，使客户端主机能够通过 iSCSI 协议，像在本地存储设备上一样使用远程存储的数据。
 </para>
 <sect1 xml:id="ceph-iscsi-iscsi">
  <title>iSCSI 块存储</title>

  <para>
   iSCSI 是 RFC 3720 中指定的、使用因特网协议 (IP) 的小型计算机系统接口 (SCSI) 命令集的一种实施。iSCSI 以服务形式实施，其中，客户端（发起程序）在 TCP 端口 3260 上通过会话来与服务器（目标）通讯。iSCSI 目标的 IP 地址和端口称为 iSCSI 门户，其中，一个目标可通过一个或多个门户公开。一个目标与一个或多个门户的组合称为目标门户组 (TPG)。
  </para>

  <para>
   iSCSI 的底层数据链路层协议通常为以太网。更具体地说，现代 iSCSI 基础架构使用 10 Gb 以太网或更快的网络实现最佳吞吐量。强烈建议在 iSCSI 网关与后端 Ceph 集群之间建立 10 Gb 以太网连接。
  </para>

  <sect2 xml:id="ceph-iscsi-iscsi-target">
   <title>Linux 内核 iSCSI 目标</title>
   <para>
    Linux 内核 iSCSI 目标最初称作 linux-iscsi.org 的 LIO，它是项目的原始域和网站。在过去一段时间，适用于 Linux 平台的 iSCSI 目标实施竞争产品不少于四个，但 LIO 作为单一 iSCSI 参照目标最终获得了压倒性优势。LIO 的主流内核代码使用简单但有点含糊的名称“目标”，旨在区分“目标核心”与各种前端和后端目标模块。
   </para>
   <para>
    可以说，最常用的前端模块就是 iSCSI。但是，LIO 也支持光纤通道 (FC)、基于以太网的光纤通道 (FCoE) 和其他多种前端协议。目前，SUSE Enterprise Storage 仅支持 iSCSI 协议。
   </para>
   <para>
    最常用的目标后端模块是能够方便地在目标主机上重新导出任何可用块设备的模块。此模块名为 iblock。但是，LIO 还有一个 RBD 特定的后端模块，该模块支持对 RBD 映像进行并行化多路径 I/O 访问。
   </para>
  </sect2>

  <sect2 xml:id="ceph-iscsi-iscsi-initiators">
   <title>iSCSI 发起程序</title>
   <para>
    本节简要介绍 Linux、Microsoft Windows 和 VMware 平台上使用的 iSCSI 发起程序。
   </para>
   <sect3>
    <title>Linux</title>
    <para>
     Linux 平台的标准发起程序是 <systemitem>open-iscsi</systemitem>。<systemitem>open-iscsi</systemitem> 会起动守护进程 <systemitem>iscsid</systemitem>，然后，用户可以使用该守护进程来发现任何给定门户上的 iSCSI 目标、登录到目标，以及映射 iSCSI 卷。<systemitem>iscsid</systemitem> 会与 SCSI 中间层通讯以创建内核中块设备，然后，内核便可像对待系统中任何其他的 SCSI 块设备一样来处理这些设备。可以结合设备映射程序多路径 (<systemitem>dm-multipath</systemitem>) 工具一起部署 <systemitem>open-iscsi</systemitem> 发起程序，以提供高度可用的 iSCSI 块设备。
    </para>
   </sect3>
   <sect3>
    <title>Microsoft Windows 和 Hyper-V</title>
    <para>
     Microsoft Windows 操作系统的默认 iSCSI 发起程序是 Microsoft iSCSI 发起程序。iSCSI 服务可通过图形用户界面 (GUI) 进行配置，并支持使用多路径 I/O 实现高可用性。
    </para>
   </sect3>
   <sect3>
    <title>VMware</title>
    <para>
     VMware vSphere 和 ESX 的默认 iSCSI 发起程序是 VMware ESX 软件 iSCSI 发起程序 <systemitem>vmkiscsi</systemitem>。启用该发起程序后，可通过 vSphere 客户端或使用 <command>vmkiscsi-tool</command> 命令对其进行配置。然后，可以使用 VMFS 来格式化通过 vSphere iSCSI 存储适配器连接的存储卷，并像使用任何其他 VM 存储设备一样使用它们。VMware 发起程序也支持使用多路径 I/O 实现高可用性。
    </para>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="ceph-iscsi-lrbd">
  <title>有关 lrbd 的一般信息</title>

  <para>
   <systemitem>lrbd</systemitem> 兼具 RADOS 块设备的优势与 iSCSI 无所不包的多样性。在 iSCSI 目标主机（称为 <systemitem>lrbd</systemitem> 网关）上采用 <systemitem>lrbd</systemitem> 后，需要利用块存储的任何应用都可受益于 Ceph，即使不运行 Ceph 客户端协议也是如此。而用户可以使用 iSCSI 或任何其他目标前端协议连接到 LIO 目标，从而可以转换针对 RBD 存储的所有目标 I/O。
  </para>

  <figure>
   <title>包含单个 iSCSI 网关的 Ceph 集群</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="lrbd_scheme1.png" width="75%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="lrbd_scheme1.png" width="75%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   <systemitem>lrbd</systemitem> 本来就具有高可用性，并支持多路径操作。因此，下游发起程序主机可以使用多个 iSCSI 网关实现高可用性和可伸缩性。与包含多个网关的 iSCSI 配置通讯时，发起程序可在多个网关之间实现 iSCSI 请求的负载平衡。如果某个网关发生故障（暂时不可访问，或因为维护已被禁用），将通过另一个网关以透明方式继续处理 I/O。
  </para>

  <figure>
   <title>包含多个 iSCSI 网关的 Ceph 集群</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="lrbd_scheme2.png" width="75%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="lrbd_scheme2.png" width="75%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>
 </sect1>
 <sect1 xml:id="ceph-iscsi-deploy">
  <title>部署考虑事项</title>

  <para>
   包含 <systemitem>lrbd</systemitem> 的最低 SUSE Enterprise Storage 配置包括以下组件：
  </para>

  <itemizedlist>
   <listitem>
    <para>
     一个 Ceph 存储集群。该 Ceph 集群至少包括四台物理服务器，其中每台服务器至少托管八个对象存储守护进程 (OSD)。在此类配置中，有三个 OSD 节点额外充当监视器 (MON) 主机。
    </para>
   </listitem>
   <listitem>
    <para>
     一台通过 <systemitem>lrbd</systemitem> 配置且运行 LIO iSCSI 目标的 iSCSI 目标服务器。
    </para>
   </listitem>
   <listitem>
    <para>
     一台 iSCSI 发起程序主机，它运行 <systemitem>open-iscsi</systemitem> (Linux)、Microsoft iSCSI 发起程序 (Microsoft Windows) 或任何其他兼容的 iSCSI 发起程序实施。
    </para>
   </listitem>
  </itemizedlist>

  <para>
   使用 <systemitem>lrbd</systemitem> 的建议 SUSE Enterprise Storage 生产配置包括：
  </para>

  <itemizedlist>
   <listitem>
    <para>
     一个 Ceph 存储集群。一个 Ceph 生产集群，它由任意数量（通常是 10 个以上）的 OSD 节点组成，其中每个节点通常运行 10-12 个对象存储守护进程 (OSD)，以及至少三台专用 MON 主机。
    </para>
   </listitem>
   <listitem>
    <para>
     多台通过 <systemitem>lrbd</systemitem> 配置且运行 LIO iSCSI 目标的 iSCSI 目标服务器。为实现 iSCSI 故障转移和负载平衡，这些服务器必须运行支持 <systemitem>target_core_rbd</systemitem> 模块的内核。可通过 SUSE Linux Enterprise Server 维护渠道获取更新包。
    </para>
   </listitem>
   <listitem>
    <para>
     任意数量的 iSCSI 发起程序主机，这些主机运行 <systemitem>open-iscsi</systemitem> (Linux)、Microsoft iSCSI 发起程序 (Microsoft Windows) 或任何其他兼容的 iSCSI 发起程序实施。
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="ceph-iscsi-install">
  <title>安装和配置</title>

  <para>
   本节介绍在 SUSE Enterprise Storage 的基础上安装和配置 iSCSI 网关的步骤。
  </para>

  <sect2>
   <title>将 iSCSI 网关部署到 Ceph 集群</title>
   <para>
    您可以在 Ceph 集群部署期间部署 iSCSI 网关，或者使用 DeepSea 将其添加到现有集群。
   </para>
   <para>
    要在集群部署期间加入 iSCSI 网关，请参见<xref linkend="policy-role-assignment"/>。
   </para>
   <para>
    要将 iSCSI 网关添加到现有集群，请参见<xref linkend="salt-adding-services"/>。
   </para>
  </sect2>

  <sect2>
   <title>创建 RBD 映像</title>
   <para>
    RBD 映像创建于 Ceph 存储区中，随后会导出到 iSCSI。建议为此使用专用的 RADOS 存储池。您可以在能使用 Ceph <command>rbd</command> 命令行实用程序连接到存储集群的任何主机上创建卷。这需要客户端至少有一个精简的 ceph.conf 配置文件，以及相应的 CephX 身份验证身份凭证。
   </para>
   <para>
    要通过 iSCSI 创建一个随后可供导出的新卷，请使用 <command>rbd create</command> 命令并指定卷大小（以 MB 为单位）。例如，要在名为 <literal>iscsi</literal> 的存储池中创建名为 <literal>testvol</literal> 的 100 GB 卷，请运行：
   </para>
<screen><prompt>root # </prompt>rbd --pool iscsi create --size=102400 testvol</screen>
   <para>
    上述命令将以默认格式 2 创建一个 RBD 卷。
   </para>
   <note>
    <para>
     从 SUSE Enterprise Storage 3 开始，默认卷格式为 2，格式 1 已弃用。但是，您仍可以使用 <option>--image-format 1</option> 选项创建采用已弃用格式 1 的卷。
    </para>
   </note>
  </sect2>

  <sect2 xml:id="ceph-iscsi-rbd-export">
   <title>通过 iSCSI 导出 RBD 映像</title>
   <para>
    要通过 iSCSI 导出 RBD 映像，请使用 <systemitem>lrbd</systemitem> 实用程序。<systemitem>lrbd</systemitem> 可用于创建、查看和修改采用 JSON 格式的 iSCSI 目标配置。
   </para>
   <tip>
    <title>将更改导入到 openATTIC</title>
    <para>
     DeepSea 和 openATTIC 中看不到使用 <command>lrbd</command> 命令对 iSCSI 网关配置所做的任何更改。要导入您的手动更改，需要将 iSCSI 网关配置导出到一个文件：
    </para>
<screen>
<prompt>root@minion &gt; </prompt>lrbd -o /tmp/lrbd.conf
</screen>
    <para>
     然后将其复制到 Salt Master 以便 DeepSea 和 openATTIC 可以看到该文件：
    </para>
<screen>
<prompt>root@minion &gt; </prompt>scp /tmp/lrbd.conf ses5master:/srv/salt/ceph/igw/cache/lrbd.conf
</screen>
    <para>
     最后，编辑 <filename>/srv/pillar/ceph/stack/global.yml</filename> 并做如下设置：
    </para>
<screen>
igw_config: default-ui
</screen>
   </tip>
   <para>
    要编辑配置，请使用 <command>lrbd -e</command> 或 <command>lrbd --edit</command>。此命令将调用 <literal>EDITOR</literal> 环境变量定义的默认编辑器。可以通过同时设置 <option>-E</option> 选项和 <option>-e</option> 来覆盖此行为。
   </para>
   <para>
    下面的示例配置针对以下情境：
   </para>
   <itemizedlist>
    <listitem>
     <para>
      有两个分别名为 <literal>iscsi1.example.com</literal> 和 <literal>iscsi2.example.com</literal> 的 iSCSI 网关主机，
     </para>
    </listitem>
    <listitem>
     <para>
      使用 <literal>iqn.2003-01.org.linux-iscsi.iscsi.x86:testvol</literal> 的 iSCSI 限定名称 (IQN) 定义单个 iSCSI 目标，
     </para>
    </listitem>
    <listitem>
     <para>
      包含单个 iSCSI 逻辑单元 (LU)，
     </para>
    </listitem>
    <listitem>
     <para>
      以 RADOS 存储池 <literal>rbd</literal> 中名为 <literal>testvol</literal> 的 RBD 映像为基础，
     </para>
    </listitem>
    <listitem>
     <para>
      通过名为“east”和“west”的两个门户导出目标：
     </para>
    </listitem>
   </itemizedlist>
<screen>{
    "auth": [
        {
            "target": "iqn.2003-01.org.linux-iscsi.iscsi.x86:testvol",
            "authentication": "none"
        }
    ],
    "targets": [
        {
            "target": "iqn.2003-01.org.linux-iscsi.iscsi.x86:testvol",
            "hosts": [
                {
                    "host": "iscsi1.example.com",
                    "portal": "east"
                },
                {
                    "host": "iscsi2.example.com",
                    "portal": "west"
                }
            ]
        }
    ],
    "portals": [
        {
            "name": "east",
            "addresses": [
                "192.168.124.104"
            ]
        },
        {
            "name": "west",
            "addresses": [
                "192.168.124.105"
            ]
        }
    ],
    "pools": [
        {
            "pool": "rbd",
            "gateways": [
                {
                    "target": "iqn.2003-01.org.linux-iscsi.iscsi.x86:testvol",
                    "tpg": [
                        {
                            "image": "testvol"
                        }
                    ]
                }
            ]
        }
    ]
    }</screen>
   <para>
    请注意，每当您在配置中引用某个主机名时，此主机名必须与 iSCSI 网关的 <command>uname -n</command> 命令输出相匹配。
   </para>
   <para>
    编辑的 JSON 存储在每个存储池的单个 RADOS 对象的扩展属性 (xattrs) 中。此对象适用于在其中编辑了 JSON 的网关主机，以及与同一 Ceph 集群连接的所有网关主机。不会将任何配置信息存储在 <systemitem>lrbd</systemitem> 网关本地。
   </para>
   <para>
    要激活该配置，请将其存储在 Ceph 集群中，并以 <systemitem class="username">root</systemitem> 身份执行以下其中一项操作：
   </para>
   <itemizedlist>
    <listitem>
     <para>
      从命令行运行 <command>lrbd</command> 命令（不带附加选项），
     </para>
    </listitem>
   </itemizedlist>
   <para>
    或者
   </para>
   <itemizedlist>
    <listitem>
     <para>
      使用 <command>service lrbd restart</command> 重启动 <systemitem>lrbd</systemitem> 服务。
     </para>
    </listitem>
   </itemizedlist>
   <para>
    <systemitem>lrbd</systemitem>“服务”不会运行任何后台守护进程，只是调用 <command>lrbd</command> 命令。此类服务称为“一次性”服务。
   </para>
   <para>
    您还应该启用在系统启动时自动配置 <systemitem>lrbd</systemitem> 的功能。为此，请运行 <command>systemctl enable lrbd</command> 命令。
   </para>
   <para>
    上述配置反映了一种简单的单一网关设置。<systemitem>lrbd</systemitem> 配置可能要复杂且强大得多。<systemitem>lrbd</systemitem> RPM 包随附了大量的配置示例，安装后，您可以通过查看 <filename>/usr/share/doc/packages/lrbd/samples</filename> 目录的内容来参考这些示例。也可以从 <link xlink:href="https://github.com/SUSE/lrbd/tree/master/samples"/> 获取这些示例。
   </para>
  </sect2>

  <sect2 xml:id="ceph-iscsi-rbd-optional">
   <title>可选设置</title>
   <para>
    以下设置可能对某些环境有用。用于映像的属性有 <option>uuid</option>、<option>lun</option>、<option>retries</option>、<option>sleep</option> 和 <option>retry_errors</option>。使用前两个属性（<option>uuid</option> 和 <option>lun</option>）可以硬编码特定映像的“uuid”或“lun”。您可为映像指定这两者中的任一属性。<option>retries</option>、<option>sleep</option> 和 <option>retry_errors</option> 会影响映射 rbd 映像的尝试。
   </para>
<screen>"pools": [
    {
        "pool": "rbd",
        "gateways": [
        {
        "host": "igw1",
        "tpg": [
                    {
                        "image": "archive",
                        "uuid": "12345678-abcd-9012-efab-345678901234",
                        "lun": "2",
                        "retries": "3",
                        "sleep": "4",
                        "retry_errors": [ 95 ],
                        [...]
                    }
                ]
            }
        ]
    }
]</screen>
  </sect2>

  <sect2 xml:id="ceph-iscsi-rbd-advanced">
   <title>高级设置</title>
   <para>
    可以为 <systemitem>lrbd</systemitem> 配置随后将传递给 LIO I/O 目标的高级参数。这些参数会划分为 iSCSI 和后备存储组件，然后可分别在 <systemitem>lrbd</systemitem> 配置的“targets”和“tpg”段落中指定。
   </para>
   <warning>
    <para>
     不建议更改这些参数的默认设置。
    </para>
   </warning>
<screen>"targets": [
    {
        [...]
        "tpg_default_cmdsn_depth": "64",
        "tpg_default_erl": "0",
        "tpg_login_timeout": "10",
        "tpg_netif_timeout": "2",
        "tpg_prod_mode_write_protect": "0",
    }
]</screen>
   <para>
    选项说明如下：
   </para>
   <variablelist>
    <varlistentry>
     <term>tpg_default_cmdsn_depth</term>
     <listitem>
      <para>
       默认的 CmdSN（命令顺序号）深度。限制 iSCSI 发起程序在任意时刻可拥有的未处理请求数量。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>tpg_default_erl</term>
     <listitem>
      <para>
       默认的错误恢复级别。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>tpg_login_timeout</term>
     <listitem>
      <para>
       登录超时值（以秒为单位）。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>tpg_netif_timeout</term>
     <listitem>
      <para>
       NIC 故障超时（以秒为单位）。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>tpg_prod_mode_write_protect</term>
     <listitem>
      <para>
       如果设置为 1，则阻止写入到 LUN。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
<screen>"pools": [
    {
        "pool": "rbd",
        "gateways": [
        {
        "host": "igw1",
        "tpg": [
                    {
                        "image": "archive",
                        "backstore_block_size": "512",
                        "backstore_emulate_3pc": "1",
                        "backstore_emulate_caw": "1",
                        "backstore_emulate_dpo": "0",
                        "backstore_emulate_fua_read": "0",
                        "backstore_emulate_fua_write": "1",
                        "backstore_emulate_model_alias": "0",
                        "backstore_emulate_rest_reord": "0",
                        "backstore_emulate_tas": "1",
                        "backstore_emulate_tpu": "0",
                        "backstore_emulate_tpws": "0",
                        "backstore_emulate_ua_intlck_ctrl": "0",
                        "backstore_emulate_write_cache": "0",
                        "backstore_enforce_pr_isids": "1",
                        "backstore_fabric_max_sectors": "8192",
                        "backstore_hw_block_size": "512",
                        "backstore_hw_max_sectors": "8192",
                        "backstore_hw_pi_prot_type": "0",
                        "backstore_hw_queue_depth": "128",
                        "backstore_is_nonrot": "1",
                        "backstore_max_unmap_block_desc_count": "1",
                        "backstore_max_unmap_lba_count": "8192",
                        "backstore_max_write_same_len": "65535",
                        "backstore_optimal_sectors": "8192",
                        "backstore_pi_prot_format": "0",
                        "backstore_pi_prot_type": "0",
                        "backstore_queue_depth": "128",
                        "backstore_unmap_granularity": "8192",
                        "backstore_unmap_granularity_alignment": "4194304"
                    }
                ]
            }
        ]
    }
]</screen>
   <para>
    选项说明如下：
   </para>
   <variablelist>
    <varlistentry>
     <term>backstore_block_size</term>
     <listitem>
      <para>
       底层设备的块大小。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_emulate_3pc</term>
     <listitem>
      <para>
       如果设置为 1，则启用“第三方复制”。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_emulate_caw</term>
     <listitem>
      <para>
       如果设置为 1，则启用“比较并写入”。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_emulate_dpo</term>
     <listitem>
      <para>
       如果设置为 1，则打开“禁用页面写出”。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_emulate_fua_read</term>
     <listitem>
      <para>
       如果设置为 1，则启用“强制单元读取访问”。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_emulate_fua_write</term>
     <listitem>
      <para>
       如果设置为 1，则启用“强制单元写入访问”。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_emulate_model_alias</term>
     <listitem>
      <para>
       如果设置为 1，则使用后端设备名称作为模型别名。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_emulate_rest_reord</term>
     <listitem>
      <para>
       如果设置为 0，则队列算法修饰符的重新排序受限。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_emulate_tas</term>
     <listitem>
      <para>
       如果设置为 1，则启用“任务已中止状态”。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_emulate_tpu</term>
     <listitem>
      <para>
       如果设置为 1，则启用“精简配置 - 取消映射”。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_emulate_tpws</term>
     <listitem>
      <para>
       如果设置为 1，则启用“精简配置 - 写入相同内容”。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_emulate_ua_intlck_ctrl</term>
     <listitem>
      <para>
       如果设置为 1，则启用“单元警告联锁”。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_emulate_write_cache</term>
     <listitem>
      <para>
       如果设置为 1，则打开“启用写入快速缓存”。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_enforce_pr_isids</term>
     <listitem>
      <para>
       如果设置为 1，则强制永久性预留 ISID。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_fabric_max_sectors</term>
     <listitem>
      <para>
       结构一次可以传输的最大扇区数。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_hw_block_size</term>
     <listitem>
      <para>
       硬件块大小（以字节为单位）。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_hw_max_sectors</term>
     <listitem>
      <para>
       硬件一次可以传输的最大扇区数。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_hw_pi_prot_type</term>
     <listitem>
      <para>
       如果值为非零，则在底层硬件上启用 DIF 保护。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_hw_queue_depth</term>
     <listitem>
      <para>
       硬件队列深度。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_is_nonrot</term>
     <listitem>
      <para>
       如果设置为 1，则后备存储为非旋转设备。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_max_unmap_block_desc_count</term>
     <listitem>
      <para>
       UNMAP 的最大块描述符数。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_max_unmap_lba_count：</term>
     <listitem>
      <para>
       UNMAP 的最大 LBA 数。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_max_write_same_len</term>
     <listitem>
      <para>
       WRITE_SAME 的最大长度。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_optimal_sectors</term>
     <listitem>
      <para>
       扇区中的最佳请求大小。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_pi_prot_format</term>
     <listitem>
      <para>
       DIF 保护格式。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_pi_prot_type</term>
     <listitem>
      <para>
       DIF 保护类型。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_queue_depth</term>
     <listitem>
      <para>
       队列深度。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_unmap_granularity</term>
     <listitem>
      <para>
       UNMAP 粒度。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>backstore_unmap_granularity_alignment</term>
     <listitem>
      <para>
       UNMAP 粒度对齐。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    对于目标，可以使用 <option>tpg</option> 属性优化内核参数。使用此选项时要特别小心。
   </para>
<screen>"targets": [
{
    "host": "igw1",
    "target": "iqn.2003-01.org.linux-iscsi.generic.x86:sn.abcdefghijk",
    "tpg_default_cmdsn_depth": "64",
    "tpg_default_erl": "0",
    "tpg_login_timeout": "10",
    "tpg_netif_timeout": "2",
    "tpg_prod_mode_write_protect": "0",
    "tpg_t10_pi": "0"
}</screen>
   <tip>
    <para>
     如果站点需要静态指定的 LUN，请对每个 LUN 指定编号。
    </para>
   </tip>
  </sect2>
 </sect1>
 <sect1 xml:id="iscsi-tcmu">
  <title>使用 <systemitem>tcmu-runner</systemitem> 导出 RADOS 块设备映像</title>

  <para>
   从版本 5 开始，SUSE Enterprise Storage 针对 <systemitem>tcmu-runner</systemitem> 随附了一个用户空间 RBD 后端（有关详细信息，请参见 <command>man 8 tcmu-runner</command>）。
  </para>

  <warning>
   <title>技术预览</title>
   <para>
    基于 <systemitem>tcmu-runner</systemitem> 的 iSCSI 网关部署目前以技术预览的方式提供。有关使用 <systemitem>lrbd</systemitem> 进行基于内核的 iSCSI 网关部署的指导，请参见<xref linkend="cha-ceph-as-iscsi"/>。
   </para>
  </warning>

  <para>
   与基于内核的 <systemitem>lrbd</systemitem> iSCSI 网关部署不同，基于 <systemitem>tcmu-runner</systemitem> 的 iSCSI 网关不支持多路径 I/O 或 SCSI 永久性预留。
  </para>

  <para>
   由于 DeepSea 和 openATTIC 目前不支持 <systemitem>tcmu-runner</systemitem> 部署，因此您需要手动管理安装、部署和监视。
  </para>

  <sect2 xml:id="iscsi-tcmu-install">
   <title>安装</title>
   <para>
    在 iSCSI 网关节点上，安装 SUSE Enterprise Storage 5 媒体中的 <systemitem>tcmu-runner-handler-rbd</systemitem> 包，以及 <systemitem>libtcmu1</systemitem> 和 <systemitem>tcmu-runner</systemitem> 包依赖项。安装用于配置的 <systemitem>targetcli-fb</systemitem> 包。请注意，<systemitem>targetcli-fb</systemitem> 包与“non-fb”版本的 <systemitem>targetcli</systemitem> 包不兼容。
   </para>
   <para>
    确认 <systemitem>tcmu-runner</systemitem> <systemitem class="daemon">systemd</systemitem> 服务正在运行：
   </para>
<screen><prompt>root # </prompt>systemctl enable tcmu-runner
tcmu-gw:~ # systemctl status tcmu-runner
● tcmu-runner.service - LIO Userspace-passthrough daemon
  Loaded: loaded (/usr/lib/systemd/system/tcmu-runner.service; static; vendor
  preset: disabled)
    Active: active (running) since ...</screen>
  </sect2>

  <sect2 xml:id="iscsi-tcmu-depl">
   <title>配置和部署</title>
   <para>
    在现有的 Ceph 集群上创建一个 RADOS 块设备映像。在以下示例中，我们将使用“rbd”存储池中名为“tcmu-lu”的 10G 映像。
   </para>
   <para>
    创建 RADOS 块设备映像后，请运行 <command>targetcli</command>，并确保 tcmu-runner RBD 处理程序（插件）可用：
   </para>
<screen><prompt>root # </prompt>targetcli
targetcli shell version 2.1.fb46
Copyright 2011-2013 by Datera, Inc and others.
For help on commands, type 'help'.

/&gt; ls
o- / ................................... [...]
  o- backstores ........................ [...]
...
  | o- user:rbd ......... [Storage Objects: 0]</screen>
   <para>
    为 RBD 映像创建一个后备存储配置项：
   </para>
<screen>/&gt; cd backstores/user:rbd
/backstores/user:rbd&gt; create tcmu-lu 10G /rbd/tcmu-lu
Created user-backed storage object tcmu-lu size 10737418240.</screen>
   <para>
    创建一个 iSCSI 传输配置项。在下面的示例中，目标限定名“iqn.2003-01.org.linux-iscsi.tcmu-gw.x8664:sn.cb3d2a3a”由 <command>targetcli</command> 自动生成，用作唯一的 iSCSI 目标标识符：
   </para>
<screen>/backstores/user:rbd&gt; cd /iscsi
/iscsi&gt; create
Created target iqn.2003-01.org.linux-iscsi.tcmu-gw.x8664:sn.cb3d2a3a.
Created TPG 1.
Global pref auto_add_default_portal=true
Created default portal listening on all IPs (0.0.0.0), port 3260.</screen>
   <para>
    针对您要连接到目标的 iSCSI 发起程序创建一个 ACL 项。在下面的示例中，使用了发起程序 IQN“iqn.1998-01.com.vmware:esxi-872c4888”：
   </para>
<screen>/iscsi&gt; cd
iqn.2003-01.org.linux-iscsi.tcmu-gw.x8664:sn.cb3d2a3a/tpg1/acls/
/iscsi/iqn.20...a3a/tpg1/acls&gt; create iqn.1998-01.com.vmware:esxi-872c4888</screen>
   <para>
    最后，将前面创建的 RBD 后备存储配置链接到 iSCSI 目标：
   </para>
<screen>/iscsi/iqn.20...a3a/tpg1/acls&gt; cd ../luns
/iscsi/iqn.20...a3a/tpg1/luns&gt; create /backstores/user:rbd/tcmu-lu
Created LUN 0.
Created LUN 0-&gt;0 mapping in node ACL iqn.1998-01.com.vmware:esxi-872c4888</screen>
   <para>
    退出外壳以保存现有配置：
   </para>
<screen>/iscsi/iqn.20...a3a/tpg1/luns&gt; exit
Global pref auto_save_on_exit=true
Last 10 configs saved in /etc/target/backup.
Configuration saved to /etc/target/saveconfig.json</screen>
  </sect2>

  <sect2 xml:id="iscsi-tcmu-use">
   <title>用法</title>
   <para>
    使用前面配置的 IQN 和主机名，从 iSCSI 发起程序（客户端）节点连接到新供应的 iSCSI 目标。
   </para>
  </sect2>
 </sect1>
</chapter>
